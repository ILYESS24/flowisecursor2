name: Complete CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:
    schedule:
        # Run security scans daily at 2 AM UTC
        - cron: '0 2 * * *'

permissions:
    contents: read
    security-events: write
    actions: read

env:
    NODE_VERSION: '20'
    PNPM_VERSION: '9.0.4'
    PUPPETEER_SKIP_DOWNLOAD: true

jobs:
    # Job 1: Security Audit and Dependency Check
    security-audit:
        name: Security Audit
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run npm audit
              run: |
                  echo "Running npm audit..."
                  pnpm audit --audit-level moderate || true
                  echo "npm audit completed"

            - name: Run pnpm audit
              run: |
                  echo "Running pnpm audit..."
                  pnpm audit --audit-level moderate || true
                  echo "pnpm audit completed"

            - name: Check for known vulnerabilities
              run: |
                  echo "Checking for known vulnerabilities..."
                  pnpm audit --json > audit-results.json || true
                  echo "Audit results saved"

            - name: Upload audit results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-audit-results
                  path: audit-results.json

    # Job 2: Code Quality and Linting
    code-quality:
        name: Code Quality
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run ESLint
              run: |
                  echo "Running ESLint..."
                  pnpm lint || true
                  echo "ESLint completed"

            - name: Run Prettier check
              run: |
                  echo "Running Prettier check..."
                  pnpm format --check || true
                  echo "Prettier check completed"

            - name: TypeScript type check
              run: |
                  echo "Running TypeScript type check..."
                  pnpm --filter "./packages/**" tsc --noEmit || true
                  echo "TypeScript check completed"

    # Job 3: Build and Test
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18.15.0, 20]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build project
              run: |
                  echo "Building project..."
                  pnpm build
                  echo "Build completed"
              env:
                  NODE_OPTIONS: '--max_old_space_size=4096'

            - name: Run tests
              run: |
                  echo "Running tests..."
                  pnpm test || true
                  echo "Tests completed"

            - name: Generate test coverage
              run: |
                  echo "Generating test coverage..."
                  pnpm --filter "./packages/**" test --coverage || true
                  echo "Coverage generated"

    # Job 4: Docker Security Scan
    docker-security:
        name: Docker Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Build Docker image
              run: |
                  echo "Building Docker image..."
                  docker build --no-cache -t flowise:test .
                  echo "Docker image built"

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: 'flowise:test'
                  format: 'sarif'
                  output: 'trivy-results.sarif'

            - name: Upload Trivy scan results
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: 'trivy-results.sarif'

            - name: Run Docker Scout
              run: |
                  echo "Running Docker Scout..."
                  docker scout quickview flowise:test || true
                  echo "Docker Scout completed"

    # Job 5: Performance Testing
    performance-test:
        name: Performance Testing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build project
              run: pnpm build
              env:
                  NODE_OPTIONS: '--max_old_space_size=4096'

            - name: Start Flowise server
              run: |
                  echo "Starting Flowise server..."
                  pnpm start &
                  sleep 30
                  echo "Server started"

            - name: Run Artillery load tests
              run: |
                  echo "Running Artillery load tests..."
                  if [ -f "artillery-load-test.yml" ]; then
                      npx artillery run artillery-load-test.yml || true
                  else
                      echo "No Artillery config found, skipping load tests"
                  fi
                  echo "Load tests completed"

    # Job 6: E2E Tests with Cypress
    e2e-tests:
        name: E2E Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build project
              run: pnpm build
              env:
                  NODE_OPTIONS: '--max_old_space_size=4096'

            - name: Cypress install
              run: pnpm cypress install

            - name: Run Cypress tests
              uses: cypress-io/github-action@v6
              with:
                  working-directory: packages/server
                  start: pnpm start
                  wait-on: 'http://localhost:3000'
                  wait-on-timeout: 120
                  browser: chrome
                  record: false

    # Job 7: Dependency Update Check
    dependency-check:
        name: Dependency Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Check for outdated packages
              run: |
                  echo "Checking for outdated packages..."
                  pnpm outdated || true
                  echo "Outdated packages check completed"

            - name: Check for unused dependencies
              run: |
                  echo "Checking for unused dependencies..."
                  npx depcheck || true
                  echo "Unused dependencies check completed"

    # Job 8: License Compliance
    license-check:
        name: License Compliance
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Check licenses
              run: |
                  echo "Checking package licenses..."
                  npx license-checker --summary || true
                  echo "License check completed"

    # Job 9: Generate Security Report
    security-report:
        name: Security Report
        runs-on: ubuntu-latest
        needs: [security-audit, docker-security, code-quality]
        if: always()
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download security artifacts
              uses: actions/download-artifact@v4
              if: always()

            - name: Generate security summary
              run: |
                  echo "# Security Scan Summary" > security-summary.md
                  echo "Generated on: $(date)" >> security-summary.md
                  echo "" >> security-summary.md
                  echo "## Jobs Status" >> security-summary.md
                  echo "- Security Audit: ${{ needs.security-audit.result }}" >> security-summary.md
                  echo "- Docker Security: ${{ needs.docker-security.result }}" >> security-summary.md
                  echo "- Code Quality: ${{ needs.code-quality.result }}" >> security-summary.md
                  echo "" >> security-summary.md
                  echo "## Recommendations" >> security-summary.md
                  echo "1. Review all security audit results" >> security-summary.md
                  echo "2. Update vulnerable dependencies" >> security-summary.md
                  echo "3. Fix code quality issues" >> security-summary.md
                  echo "4. Review Docker image vulnerabilities" >> security-summary.md

            - name: Upload security report
              uses: actions/upload-artifact@v4
              with:
                  name: security-report
                  path: security-summary.md
